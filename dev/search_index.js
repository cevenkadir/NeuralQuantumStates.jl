var documenterSearchIndex = {"docs":
[{"location":"manual/lattices/","page":"Lattices","title":"Lattices","text":"CurrentModule = NeuralQuantumStates","category":"page"},{"location":"manual/lattices/#Lattices","page":"Lattices","title":"Lattices","text":"","category":"section"},{"location":"lib/public/","page":"Public API","title":"Public API","text":"CurrentModule = NeuralQuantumStates","category":"page"},{"location":"lib/public/#Public-API","page":"Public API","title":"Public API","text":"","category":"section"},{"location":"lib/public/#Contents","page":"Public API","title":"Contents","text":"","category":"section"},{"location":"lib/public/","page":"Public API","title":"Public API","text":"Pages = [\"public.md\"]\nDepth = 2","category":"page"},{"location":"lib/public/#Index","page":"Public API","title":"Index","text":"","category":"section"},{"location":"lib/public/","page":"Public API","title":"Public API","text":"Pages = [\"public.md\"]","category":"page"},{"location":"lib/public/","page":"Public API","title":"Public API","text":"Modules = [NeuralQuantumStates, NeuralQuantumStates.Lattices]","category":"page"},{"location":"lib/public/#NeuralQuantumStates.Lattices.Lattice","page":"Public API","title":"NeuralQuantumStates.Lattices.Lattice","text":"Lattice{Tᵢ<:Integer,T<:Real,D,O} <: AbstractLattice{Tᵢ,T,D,O}\n\nA D-dimensional NeuralQuantumStates.Lattices.Lattice of shape with given lattice     basis and periodic boundary conditions.\n\nFields\n\nmetagraph::MetaGraph{Tᵢ}: A MetaGraphsNext.MetaGraph for the lattice to store its   vertices and edges.\nshape::SVector{D,Tᵢ}: A vector for the shape of the lattice. It must contain D   positive integers.\nbasis::AbstractLatticeBasis{T,D,O}: A lattice basis for representing the unit cell of   the lattice.\nperiodic::SVector{D,Bool}: A vector for the periodic boundary condition of the lattice   in each dimension.\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#NeuralQuantumStates.Lattices.Lattice-Union{Tuple{L}, Tuple{O}, Tuple{D}, Tuple{T}, Tuple{Tᵢ}, Tuple{AbstractVector{Tᵢ}, NeuralQuantumStates.Lattices.AbstractLatticeBasis{T, D, O}, Tuple{AbstractArray{Tuple{L, L}, 1}, AbstractVector{Tᵢ}}, AbstractVector{Bool}}} where {Tᵢ<:Integer, T<:Real, D, O, L}","page":"Public API","title":"NeuralQuantumStates.Lattices.Lattice","text":"Lattice(\n    shape::AbstractVector{Tᵢ},\n    basis::AbstractLatticeBasis{T,D,O},\n    custom_edges::Tuple{AbstractVector{NTuple{2,L}},AbstractVector{Tᵢ}},\n    periodic::SVector{Bool}=fill(false, D)\n) where {Tᵢ<:Integer,T<:Real,D,O,L} -> Lattice{Tᵢ,T,D,O}\n\nBuild a D-dimensional NeuralQuantumStates.Lattices.Lattice of shape by using the given     lattice basis, periodic boundary conditions and custom_edges.\n\nArguments\n\nshape::AbstractVector{Tᵢ}: A vector for the shape of the lattice. It must contain D   positive integers.\nbasis::AbstractLatticeBasis{T,D,O}: A lattice basis for representing the unit cell of   the lattice.\ncustom_edges::Tuple{AbstractVector{NTuple{2,L}},AbstractVector{Tᵢ}}: A tuple of two   vectors for the custom edges to be added to the lattice. The first vector contains the   lattice site labels of the edges to be added in the form of NTuple{2,L} where L is   the type of the lattice site labels. The second vector is of positive integers for   distingushing the edges to be added. These two vectors must have the same length.\nperiodic::AbstractVector{Bool}: A vector for the periodic boundary condition of the   lattice in each dimension. Defaults to fill(false, D).\n\nReturns\n\nLattice{Tᵢ,T,D,O}: The built D-dimensional NeuralQuantumStates.Lattices.Lattice of   shape by using the given lattice basis, periodic boundary conditions and   custom_edges.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#NeuralQuantumStates.Lattices.Lattice-Union{Tuple{L}, Tuple{O}, Tuple{D}, Tuple{T}, Tuple{Tᵢ}, Tuple{StaticArraysCore.SVector{D, Tᵢ}, NeuralQuantumStates.Lattices.AbstractLatticeBasis{T, D, O}, Tuple{AbstractArray{Tuple{L, L}, 1}, AbstractVector{Tᵢ}}, StaticArraysCore.SVector{D, Bool}}} where {Tᵢ<:Integer, T<:Real, D, O, L}","page":"Public API","title":"NeuralQuantumStates.Lattices.Lattice","text":"Lattice(\n    shape::SVector{D,Tᵢ},\n    basis::AbstractLatticeBasis{T,D,O},\n    custom_edges::Tuple{AbstractVector{NTuple{2,L}},AbstractVector{Tᵢ}},\n    periodic::SVector{D,Bool}=SVector{D,Bool}(fill(false, D))\n) where {Tᵢ<:Integer,T<:Real,D,O,L} -> Lattice{Tᵢ,T,D,O}\n\nBuild a D-dimensional NeuralQuantumStates.Lattices.Lattice of shape by using the given     lattice basis, periodic boundary conditions and custom_edges.\n\nArguments\n\nshape::SVector{D,Tᵢ}: A vector for the shape of the lattice. It must contain D   positive integers.\nbasis::AbstractLatticeBasis{T,D,O}: A lattice basis for representing the unit cell of   the lattice.\ncustom_edges::Tuple{AbstractVector{NTuple{2,L}},AbstractVector{Tᵢ}}: A tuple of two   vectors for the custom edges to be added to the lattice. The first vector contains the   lattice site labels of the edges to be added in the form of NTuple{2,L} where L is   the type of the lattice site labels. The second vector is of positive integers for   distingushing the edges to be added. These two vectors must have the same length.\nperiodic::SVector{D,Bool}: A vector for the periodic boundary condition of the   lattice in each dimension. Defaults to SVector{D,Bool}(fill(false, D)).\n\nReturns\n\nLattice{Tᵢ,T,D,O}: The built D-dimensional NeuralQuantumStates.Lattices.Lattice of   shape by using the given lattice basis, periodic boundary conditions and   custom_edges.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#NeuralQuantumStates.Lattices.Lattice-Union{Tuple{O}, Tuple{D}, Tuple{T}, Tuple{Tᵢ}, Tuple{AbstractVector{Tᵢ}, NeuralQuantumStates.Lattices.AbstractLatticeBasis{T, D, O}, AbstractVector{Bool}}} where {Tᵢ<:Integer, T<:Real, D, O}","page":"Public API","title":"NeuralQuantumStates.Lattices.Lattice","text":"Lattice(\n    shape::AbstractVector{Tᵢ},\n    basis::AbstractLatticeBasis{T,D,O},\n    periodic::AbstractVector{Bool}=fill(false, D);\n    max_order::Tᵢ=1,\n    tol_digits::Tᵢ=12,\n    dist_tol::T=1.0e-12\n) where {Tᵢ<:Integer,T<:Real,D,O} -> Lattice{Tᵢ,T,D,O}\n\nBuild a D-dimensional NeuralQuantumStates.Lattices.Lattice of shape by using the given     lattice basis and periodic boundary conditions.\n\nArguments\n\nshape::AbstractVector{Tᵢ}: A vector for the shape of the lattice. It must contain D   positive integers.\nbasis::AbstractLatticeBasis{T,D,O}: A lattice basis for representing the unit cell of   the lattice.\nperiodic::AbstractVector{Bool}: A vector for the periodic boundary condition of the   lattice in each dimension. Defaults to fill(false, D).\n\nKeywords\n\nmax_order::Tᵢ: An integer for the maximum order of the edges to be included in the   lattice as max_order-nearest neighbors. Defaults to 1, which means only nearest   neighbors are included. For example, if it is set to 2, then nearest and next-nearest   neighbors are included.\ntol_digits::Tᵢ: An integer for the number of digits to round the calculated distances   to. Defaults to 12.\ndist_tol::T: A positive number for the tolerance of the distance between two lattice   sites to be considered as the same site. Defaults to 1.0e-12.\n\nReturns\n\nLattice{Tᵢ,T,D,O}: The built D-dimensional NeuralQuantumStates.Lattices.Lattice of   shape by using the given lattice basis and periodic boundary conditions.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#NeuralQuantumStates.Lattices.Lattice-Union{Tuple{O}, Tuple{D}, Tuple{T}, Tuple{Tᵢ}, Tuple{StaticArraysCore.SVector{D, Tᵢ}, NeuralQuantumStates.Lattices.AbstractLatticeBasis{T, D, O}, StaticArraysCore.SVector{D, Bool}}} where {Tᵢ<:Integer, T<:Real, D, O}","page":"Public API","title":"NeuralQuantumStates.Lattices.Lattice","text":"Lattice(\n    shape::SVector{D,Tᵢ},\n    basis::AbstractLatticeBasis{T,D,O},\n    periodic::SVector{D,Bool}=SVector{D,Bool}(fill(false, D));\n    max_order::Tᵢ=1,\n    tol_digits::Tᵢ=12,\n    dist_tol::T=1.0e-12\n) where {Tᵢ<:Integer,T<:Real,D,O} -> Lattice{Tᵢ,T,D,O}\n\nBuild a D-dimensional NeuralQuantumStates.Lattices.Lattice of shape by using the given     lattice basis and periodic boundary conditions.\n\nArguments\n\nshape::SVector{D,Tᵢ}: A vector for the shape of the lattice. It must contain D   positive integers.\nbasis::AbstractLatticeBasis{T,D,O}: A lattice basis for representing the unit cell of   the lattice.\nperiodic::SVector{D,Bool}: A vector for the periodic boundary condition of the   lattice in each dimension. Defaults to SVector{D,Bool}(fill(false, D)).\n\nKeywords\n\nmax_order::Tᵢ: An integer for the maximum order of the edges to be included in the   lattice as max_order-nearest neighbors. Defaults to 1, which means only nearest   neighbors are included. For example, if it is set to 2, then nearest and next-nearest   neighbors are included.\ntol_digits::Tᵢ: An integer for the number of digits to round the calculated distances   to. Defaults to 12.\ndist_tol::T: A positive number for the tolerance of the distance between two lattice   sites to be considered as the same site. Defaults to 1.0e-12.\n\nReturns\n\nLattice{Tᵢ,T,D,O}: The built D-dimensional NeuralQuantumStates.Lattices.Lattice of   shape by using the given lattice basis and periodic boundary conditions.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#NeuralQuantumStates.Lattices.LatticeBasis","page":"Public API","title":"NeuralQuantumStates.Lattices.LatticeBasis","text":"LatticeBasis{T<:Real,D,O} <: AbstractLatticeBasis{T,D,O}\n\nA lattice basis for representing the unit cell of a D-dimensional lattice with O site     offsets.\n\nFields\n\nvectors::SMatrix{D,D,T}: A DtimesD square matrix for the primitive   vectors defining the unit cell.\nsite_offsets::SMatrix{D,O,T}: A DtimesO matrix for the site offsets of the   lattice basis in the unit cell.\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#NeuralQuantumStates.Lattices.LatticeBasis-Union{Tuple{T}, Tuple{AbstractMatrix{T}, AbstractMatrix{T}}} where T<:Real","page":"Public API","title":"NeuralQuantumStates.Lattices.LatticeBasis","text":"LatticeBasis(\n    vectors::AbstractMatrix{T},\n    site_offsets::AbstractMatrix{T}=zeros(T, size(vectors)[1], 1)\n) where {T<:Real} -> LatticeBasis{T,size(vectors)[1],size(site_offsets)[2]}\n\nDefine a NeuralQuantumStates.Lattices.LatticeBasis for representing the unit cell of a     size(vectors)[1]-dimensional lattice with the given primitive vectors and     site_offsets.\n\nArguments\n\nvectors::AbstractMatrix{T}: A square matrix for the primitive vectors defining the   unit cell. Each column of the matrix is a primitive vector.\nsite_offsets::AbstractMatrix{T}: A matrix for the site offsets of the lattice basis in   the unit cell. Each column of the matrix is a site offset vector. Defaults to   zeros(T, size(vectors)[1], 1).\n\nReturns\n\nLatticeBasis{T,size(vectors)[1],size(site_offsets)[2]}: The defined   NeuralQuantumStates.Lattices.LatticeBasis for representing the unit cell of a   size(vectors)[1]-dimensional lattice with the given primitive vectors and   site_offsets.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#NeuralQuantumStates.Lattices.LatticeBasis-Union{Tuple{T}, Tuple{AbstractMatrix{T}, AbstractVector{T}}} where T<:Real","page":"Public API","title":"NeuralQuantumStates.Lattices.LatticeBasis","text":"LatticeBasis(\n    vectors::AbstractMatrix{T},\n    site_offset::AbstractVector{T}=zeros(T, size(vectors)[1])\n) where {T<:Real} -> LatticeBasis{T,size(vectors)[1],1}\n\nDefine a NeuralQuantumStates.Lattices.LatticeBasis for representing the unit cell of a     size(vectors)[1]-dimensional lattice with the given primitive vectors and     site_offset.\n\nArguments\n\nvectors::AbstractMatrix{T}: A square matrix for the primitive vectors defining the   unit cell. Each column of the matrix is a primitive vector.\nsite_offset::AbstractVector{T}: A vector for one site offset of the lattice basis in the   unit cell. Defaults to zeros(T, size(vectors)[1]).\n\nReturns\n\nLatticeBasis{T,size(vectors)[1],1}: The defined   NeuralQuantumStates.Lattices.LatticeBasis for representing the unit cell of a   size(vectors)[1]-dimensional lattice with the given primitive vectors and   site_offset.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#NeuralQuantumStates.Lattices.LatticeBasis-Union{Tuple{T}, Tuple{AbstractVector{<:AbstractVector{T}}, AbstractVector{<:AbstractVector{T}}}} where T<:Real","page":"Public API","title":"NeuralQuantumStates.Lattices.LatticeBasis","text":"LatticeBasis(\n    vectors::AbstractVector{<:AbstractVector{T}},\n    site_offsets::AbstractVector{<:AbstractVector{T}}=[zeros(T, length(vectors[1]))]\n) where {T<:Real} -> LatticeBasis{T,length(vectors[1]),length(site_offsets)}\n\nDefine a NeuralQuantumStates.Lattices.LatticeBasis for representing the unit cell of a     length(vectors[1])-dimensional lattice with the given primitive vectors and     site_offsets.\n\nArguments\n\nvectors::AbstractVector{<:AbstractVector{T}}: A vector of primitive vectors   defining the unit cell. Each element of the vector should be a primitive vector   with the same dimension.\nsite_offsets::AbstractVector{<:AbstractVector{T}}: A vector of site offsets of the   lattice basis in the unit cell. Each element of the vector should be a site offset   vector with the same dimension. Defaults to [zeros(T, length(vectors[1]))].\n\nReturns\n\nLatticeBasis{T,length(vectors[1]),length(site_offsets)}: The defined   NeuralQuantumStates.Lattices.LatticeBasis for representing the unit cell of a   length(vectors[1])-dimensional lattice with the given primitive vectors and   site_offsets.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#NeuralQuantumStates.Lattices.LatticeBasis-Union{Tuple{T}, Tuple{T, AbstractVector{T}}} where T<:Real","page":"Public API","title":"NeuralQuantumStates.Lattices.LatticeBasis","text":"LatticeBasis(\n    vector::T, site_offsets::AbstractVector{T}\n) where {T<:Real} -> LatticeBasis{T,1,length(site_offsets)}\n\nDefine a lattice basis for representing the unit cell of a 1D lattice with     length(site_offsets) site offsets.\n\nArguments\n\nvector::T: A real number for a primitive vector defining the unit cell.\nsite_offsets::AbstractVector{T}: A vector for the site offsets of the lattice basis in   the unit cell.\n\nReturns\n\nLatticeBasis{T,1,length(site_offsets)}: The defined lattice basis of a 1D lattice with   length(site_offsets) site offsets.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#NeuralQuantumStates.Lattices.LatticeBasis-Union{Tuple{T}, Tuple{T, T}} where T<:Real","page":"Public API","title":"NeuralQuantumStates.Lattices.LatticeBasis","text":"LatticeBasis(vector::T, site_offset::T=T(0.0)) where {T<:Real} -> LatticeBasis{T,1,1}\n\nDefine a NeuralQuantumStates.Lattices.LatticeBasis for representing the unit cell of a 1D     lattice with the given primitive vector and site_offset.\n\nArguments\n\nvector::T: A real number for a primitive vector defining the unit cell.\nsite_offset::T: A real number for the site offset of the lattice basis in the unit cell.   Defaults to T(0.0).\n\nReturns\n\nLatticeBasis{T,1,1}: The defined lattice basis of a 1D lattice with the given primitive   vector and site_offset.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#NeuralQuantumStates.Lattices.build-Union{Tuple{T}, Tuple{Tᵢ}, Tuple{Val{:Honeycomb}, AbstractVector{Tᵢ}, T}} where {Tᵢ<:Integer, T<:Real}","page":"Public API","title":"NeuralQuantumStates.Lattices.build","text":"build(\n    ::Val{:Honeycomb},\n    shape::AbstractVector{Tᵢ},\n    edge_length::T;\n    periodic::Union{Bool,AbstractVector{Bool}}=false,\n    tol_digits::Tᵢ=TOL_DIGITS,\n    dist_tol::T=DIST_TOL\n) where {Tᵢ<:Integer,T<:Real} -> Lattice{Tᵢ,T,2,1}\n\nBuild a 2D honeycomb lattice from the given parameters.\n\nArguments\n\nshape::AbstractVector{Tᵢ}: A vector for the shape of the lattice. It must contain two   positive integers.\nedge_length::T: A positive number for the edge length of the lattice.\n\nKeywords\n\nperiodic::Union{Bool,AbstractVector{Bool}}: A boolean or a vector for the periodic   boundary condition of the lattice in each dimension. If it is a boolean, then it is   applied to all dimensions. If it is a vector, then it must contain two booleans.   Defaults to false.\ntol_digits::Tᵢ: An integer for the number of digits to round the calculated distances   to. Defaults to 12.\ndist_tol::T: A positive number for the tolerance of the distance between two lattice   sites to be considered as the same site. Defaults to 1.0e-12.\n\nReturns\n\nLattice{Tᵢ,T,2,2}: The built 2D honeycomb lattice from the given parameters.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#NeuralQuantumStates.Lattices.build-Union{Tuple{T}, Tuple{Tᵢ}, Tuple{Val{:Hypercube}, AbstractVector{Tᵢ}, T}} where {Tᵢ<:Integer, T<:Real}","page":"Public API","title":"NeuralQuantumStates.Lattices.build","text":"build(\n    ::Val{:Hypercube},\n    shape::AbstractVector{Tᵢ},\n    edge_length::T;\n    periodic::Union{Bool,AbstractVector{Bool}}=false,\n) where {Tᵢ<:Integer,T<:Real} -> Lattice{Tᵢ,T,length(shape),1}\n\nBuild a hypercubic lattice from the given parameters.\n\nArguments\n\n::Val{:Hypercube}: A value to dispatch to this function.\nshape::AbstractVector{Tᵢ}: A vector for the shape of the lattice.\nedge_length::T: A positive number for the edge length of the lattice.\n\nKeywords\n\nperiodic::Union{Bool,AbstractVector{Bool}}: A boolean or a vector for the periodic   boundary condition of the lattice in each dimension. If it is a boolean, then it is   applied to all dimensions. If it is a vector, then it must contain length(shape)   booleans. Defaults to false.\n\nReturns\n\nLattice{Tᵢ,T,length(shape),1}: The built hypercubic lattice from the given parameters.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#NeuralQuantumStates.Lattices.build-Union{Tuple{T}, Tuple{Tᵢ}, Tuple{Val{:Kagome}, AbstractVector{Tᵢ}, T}} where {Tᵢ<:Integer, T<:Real}","page":"Public API","title":"NeuralQuantumStates.Lattices.build","text":"build(\n    ::Val{:Kagome},\n    shape::AbstractVector{Tᵢ},\n    edge_length::T;\n    periodic::Union{Bool,AbstractVector{Bool}}=false,\n    tol_digits::Tᵢ=TOL_DIGITS,\n    dist_tol::T=DIST_TOL\n) where {Tᵢ<:Integer,T<:Real} -> Lattice{Tᵢ,T,2,3}\n\nBuild a 2D kagome lattice from the given parameters.\n\nArguments\n\nshape::AbstractVector{Tᵢ}: A vector for the shape of the lattice. It must contain two   positive integers.\nedge_length::T: A positive number for the edge length of the lattice.\n\nKeywords\n\nperiodic::Union{Bool,AbstractVector{Bool}}: A boolean or a vector for the periodic   boundary condition of the lattice in each dimension. If it is a boolean, then it is   applied to all dimensions. If it is a vector, then it must contain two booleans.   Defaults to false.\ntol_digits::Tᵢ: An integer for the number of digits to round the calculated distances   to. Defaults to 12.\ndist_tol::T: A positive number for the tolerance of the distance between two lattice   sites to be considered as the same site. Defaults to 1.0e-12.\n\nReturns\n\nLattice{Tᵢ,T,2,3}: The built 2D kagome lattice from the given parameters.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#NeuralQuantumStates.Lattices.build-Union{Tuple{T}, Tuple{Tᵢ}, Tuple{Val{:Triangular}, AbstractVector{Tᵢ}, T}} where {Tᵢ<:Integer, T<:Real}","page":"Public API","title":"NeuralQuantumStates.Lattices.build","text":"build(\n    ::Val{:Triangular},\n    shape::AbstractVector{Tᵢ},\n    edge_length::T;\n    periodic::Union{Bool,AbstractVector{Bool}}=false,\n    tol_digits::Tᵢ=TOL_DIGITS,\n    dist_tol::T=DIST_TOL\n) where {Tᵢ<:Integer,T<:Real} -> Lattice{Tᵢ,T,2,1}\n\nBuild a 2D triangular lattice from the given parameters.\n\nArguments\n\n::Val{:Triangular}: A value to dispatch to this function.\nshape::AbstractVector{Tᵢ}: A vector for the shape of the lattice. It must contain two   positive integers.\nedge_length::T: A positive number for the edge length of the lattice.\n\nKeywords\n\nperiodic::Union{Bool,AbstractVector{Bool}}: A boolean or a vector for the periodic   boundary condition of the lattice in each dimension. If it is a boolean, then it is   applied to all dimensions. If it is a vector, then it must contain two booleans.   Defaults to false.\ntol_digits::Tᵢ: An integer for the number of digits to round the calculated distances   to. Defaults to 12.\ndist_tol::T: A positive number for the tolerance of the distance between two lattice   sites to be considered as the same site. Defaults to 1.0e-12.\n\nReturns\n\nLattice{Tᵢ,T,2,1}: The built 2D triangular lattice from the given parameters.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#NeuralQuantumStates.Lattices.build-Union{Tuple{T}, Tuple{Tᵢ}, Tuple{Val{:Triclinic}, AbstractVector{Tᵢ}, AbstractVector{T}, AbstractVector{T}}} where {Tᵢ<:Integer, T<:Real}","page":"Public API","title":"NeuralQuantumStates.Lattices.build","text":"build(\n    ::Val{:Triclinic},\n    shape::AbstractVector{Tᵢ},\n    edge_lengths::AbstractVector{T},\n    angles::AbstractVector{T};\n    periodic::Union{Bool,AbstractVector{Bool}}=false,\n) where {Tᵢ<:Integer,T<:Real} -> Lattice{Tᵢ,T,3,1}\n\nBuild a triclinic lattice from the given parameters.\n\nArguments\n\n::Val{:Triclinic}: A value to dispatch to this function.\nshape::AbstractVector{Tᵢ}: A vector for the shape of the lattice. It must contain three   positive integers.\nedge_lengths::AbstractVector{T}: A vector for the edge lengths of the lattice. It must   contain three positive numbers.\nangles::AbstractVector{T}: A vector for the angles in degrees between the edge lengths   of the lattice. It must contain three numbers. angles[i] is the angle between   edge_lengths[j] and edge_lengths[k] where (i,j,k) is a permutation of (1,2,3).\n\nKeywords\n\nperiodic::Union{Bool,AbstractVector{Bool}}: A boolean or a vector for the periodic   boundary condition of the lattice in each dimension. If it is a boolean, then it is   applied to all dimensions. If it is a vector, then it must contain three booleans.   Defaults to false.\n\nReturns\n\nLattice{Tᵢ,T,3,1}: The built triclinic lattice from the given parameters.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = NeuralQuantumStates","category":"page"},{"location":"#NeuralQuantumStates","page":"Home","title":"NeuralQuantumStates","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for NeuralQuantumStates.","category":"page"}]
}
