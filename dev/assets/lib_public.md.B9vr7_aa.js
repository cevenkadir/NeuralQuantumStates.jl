import{_ as p,c as n,a5 as e,j as i,a as t,G as l,B as h,o as r}from"./chunks/framework.XZkMkvdu.js";const ks=JSON.parse('{"title":"Public API","description":"","frontmatter":{},"headers":[],"relativePath":"lib/public.md","filePath":"lib/public.md","lastUpdated":null}'),o={name:"lib/public.md"},k={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},d={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},b={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},y={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0.02ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.76ex",height:"1.09ex",role:"img",focusable:"false",viewBox:"0 -491 778 482","aria-hidden":"true"},m={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},T={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0.02ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.76ex",height:"1.09ex",role:"img",focusable:"false",viewBox:"0 -491 778 482","aria-hidden":"true"},F={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},N={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},H={class:"jldocstring custom-block",open:""},Q={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},L={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},U={class:"jldocstring custom-block",open:""},V={class:"jldocstring custom-block",open:""},R={class:"jldocstring custom-block",open:""},I={class:"jldocstring custom-block",open:""},O={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},z={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},q={class:"jldocstring custom-block",open:""},G={class:"jldocstring custom-block",open:""},K={class:"jldocstring custom-block",open:""},$={class:"jldocstring custom-block",open:""},J={class:"jldocstring custom-block",open:""},Z={class:"jldocstring custom-block",open:""},W={class:"jldocstring custom-block",open:""},X={class:"jldocstring custom-block",open:""},Y={class:"jldocstring custom-block",open:""},ss={class:"jldocstring custom-block",open:""},is={class:"jldocstring custom-block",open:""},ts={class:"jldocstring custom-block",open:""},es={class:"jldocstring custom-block",open:""};function as(ls,s,ns,rs,ps,hs){const a=h("Badge");return r(),n("div",null,[s[144]||(s[144]=e('<h1 id="Public-API" tabindex="-1">Public API <a class="header-anchor" href="#Public-API" aria-label="Permalink to &quot;Public API {#Public-API}&quot;">​</a></h1><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to &quot;Index&quot;">​</a></h2><ul><li><a href="#NeuralQuantumStates.Hilberts.CompositeSumConstraint"><code>NeuralQuantumStates.Hilberts.CompositeSumConstraint</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.CompositeUniformHilbert"><code>NeuralQuantumStates.Hilberts.CompositeUniformHilbert</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.FiniteUniformHilbert"><code>NeuralQuantumStates.Hilberts.FiniteUniformHilbert</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.InfiniteUniformHilbert"><code>NeuralQuantumStates.Hilberts.InfiniteUniformHilbert</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.NoCompositeDiscreteHilbertConstraint"><code>NeuralQuantumStates.Hilberts.NoCompositeDiscreteHilbertConstraint</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.NoDiscreteHilbertConstraint"><code>NeuralQuantumStates.Hilberts.NoDiscreteHilbertConstraint</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.SumConstraint"><code>NeuralQuantumStates.Hilberts.SumConstraint</code></a></li><li><a href="#NeuralQuantumStates.Lattices.Lattice-Union{Tuple{O}, Tuple{D}, Tuple{T}, Tuple{Tᵢ}, Tuple{AbstractVector{Tᵢ}, NeuralQuantumStates.Lattices.AbstractLatticeBasis{T, D, O}, AbstractVector{Bool}}} where {Tᵢ&lt;:Integer, T&lt;:Real, D, O}"><code>NeuralQuantumStates.Lattices.Lattice</code></a></li><li><a href="#NeuralQuantumStates.Lattices.Lattice-Union{Tuple{L}, Tuple{O}, Tuple{D}, Tuple{T}, Tuple{Tᵢ}, Tuple{StaticArraysCore.SVector{D, Tᵢ}, NeuralQuantumStates.Lattices.AbstractLatticeBasis{T, D, O}, Tuple{AbstractArray{Tuple{L, L}, 1}, AbstractVector{Tᵢ}}, StaticArraysCore.SVector{D, Bool}}} where {Tᵢ&lt;:Integer, T&lt;:Real, D, O, L}"><code>NeuralQuantumStates.Lattices.Lattice</code></a></li><li><a href="#NeuralQuantumStates.Lattices.Lattice"><code>NeuralQuantumStates.Lattices.Lattice</code></a></li><li><a href="#NeuralQuantumStates.Lattices.Lattice-Union{Tuple{L}, Tuple{O}, Tuple{D}, Tuple{T}, Tuple{Tᵢ}, Tuple{AbstractVector{Tᵢ}, NeuralQuantumStates.Lattices.AbstractLatticeBasis{T, D, O}, Tuple{AbstractArray{Tuple{L, L}, 1}, AbstractVector{Tᵢ}}, AbstractVector{Bool}}} where {Tᵢ&lt;:Integer, T&lt;:Real, D, O, L}"><code>NeuralQuantumStates.Lattices.Lattice</code></a></li><li><a href="#NeuralQuantumStates.Lattices.Lattice-Union{Tuple{O}, Tuple{D}, Tuple{T}, Tuple{Tᵢ}, Tuple{StaticArraysCore.SVector{D, Tᵢ}, NeuralQuantumStates.Lattices.AbstractLatticeBasis{T, D, O}, StaticArraysCore.SVector{D, Bool}}} where {Tᵢ&lt;:Integer, T&lt;:Real, D, O}"><code>NeuralQuantumStates.Lattices.Lattice</code></a></li><li><a href="#NeuralQuantumStates.Lattices.LatticeBasis-Union{Tuple{T}, Tuple{AbstractMatrix{T}, AbstractMatrix{T}}} where T&lt;:Real"><code>NeuralQuantumStates.Lattices.LatticeBasis</code></a></li><li><a href="#NeuralQuantumStates.Lattices.LatticeBasis"><code>NeuralQuantumStates.Lattices.LatticeBasis</code></a></li><li><a href="#NeuralQuantumStates.Lattices.LatticeBasis-Union{Tuple{T}, Tuple{AbstractVector{&lt;:AbstractVector{T}}, AbstractVector{&lt;:AbstractVector{T}}}} where T&lt;:Real"><code>NeuralQuantumStates.Lattices.LatticeBasis</code></a></li><li><a href="#NeuralQuantumStates.Lattices.LatticeBasis-Union{Tuple{T}, Tuple{T, AbstractVector{T}}} where T&lt;:Real"><code>NeuralQuantumStates.Lattices.LatticeBasis</code></a></li><li><a href="#NeuralQuantumStates.Lattices.LatticeBasis-Union{Tuple{T}, Tuple{AbstractMatrix{T}, AbstractVector{T}}} where T&lt;:Real"><code>NeuralQuantumStates.Lattices.LatticeBasis</code></a></li><li><a href="#NeuralQuantumStates.Lattices.LatticeBasis-Union{Tuple{T}, Tuple{T, T}} where T&lt;:Real"><code>NeuralQuantumStates.Lattices.LatticeBasis</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.:⊗-Tuple{Vararg{NeuralQuantumStates.Hilberts.UniformHilbert}}"><code>NeuralQuantumStates.Hilberts.:⊗</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.all_states-Union{Tuple{NeuralQuantumStates.Hilberts.InfiniteUniformHilbert{T, N_DoF}}, Tuple{N_DoF}, Tuple{T}} where {T&lt;:Real, N_DoF}"><code>NeuralQuantumStates.Hilberts.all_states</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.all_states-Union{Tuple{NeuralQuantumStates.Hilberts.CompositeUniformHilbert{N, N_DoF}}, Tuple{N_DoF}, Tuple{N}} where {N, N_DoF}"><code>NeuralQuantumStates.Hilberts.all_states</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.all_states-Union{Tuple{NeuralQuantumStates.Hilberts.FiniteUniformHilbert{T, N_DoF, N_lDoF}}, Tuple{N_lDoF}, Tuple{N_DoF}, Tuple{T}} where {T&lt;:Real, N_DoF, N_lDoF}"><code>NeuralQuantumStates.Hilberts.all_states</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.build-Union{Tuple{T_n}, Tuple{T}, Tuple{Val{:Fock}, T, Integer}} where {T&lt;:Integer, T_n&lt;:Real}"><code>NeuralQuantumStates.Hilberts.build</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.build-Union{Tuple{T_Sz}, Tuple{T}, Tuple{Val{:Spin}, T, Integer}} where {T&lt;:Union{Integer, Rational}, T_Sz&lt;:Real}"><code>NeuralQuantumStates.Hilberts.build</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.check-Union{Tuple{N_HS}, Tuple{NeuralQuantumStates.Hilberts.NoCompositeDiscreteHilbertConstraint, Tuple{Vararg{Tuple{Vararg{T, N}} where {N, T}, N_HS}}}} where N_HS"><code>NeuralQuantumStates.Hilberts.check</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.check-Union{Tuple{N_HS}, Tuple{T}, Tuple{NeuralQuantumStates.Hilberts.CompositeSumConstraint{T, N_HS}, Tuple{Vararg{Tuple{Vararg{T, N}} where {N, T}, N_HS}}}} where {T&lt;:Real, N_HS}"><code>NeuralQuantumStates.Hilberts.check</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.check-Union{Tuple{N_DoF}, Tuple{T_lDoF}, Tuple{T}, Tuple{NeuralQuantumStates.Hilberts.SumConstraint{T}, Tuple{Vararg{T_lDoF, N_DoF}}}} where {T&lt;:Real, T_lDoF&lt;:Real, N_DoF}"><code>NeuralQuantumStates.Hilberts.check</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.check-Union{Tuple{N_DoF}, Tuple{T_lDoF}, Tuple{NeuralQuantumStates.Hilberts.NoDiscreteHilbertConstraint, Tuple{Vararg{T_lDoF, N_DoF}}}} where {T_lDoF&lt;:Real, N_DoF}"><code>NeuralQuantumStates.Hilberts.check</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.n_DoF-Union{Tuple{NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}}, Tuple{N_DoF}} where N_DoF"><code>NeuralQuantumStates.Hilberts.n_DoF</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.n_lDoF-Union{Tuple{NeuralQuantumStates.Hilberts.FiniteUniformHilbert{T, N_DoF, N_lDoF}}, Tuple{N_lDoF}, Tuple{N_DoF}, Tuple{T}} where {T&lt;:Real, N_DoF, N_lDoF}"><code>NeuralQuantumStates.Hilberts.n_lDoF</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.n_lDoF-Union{Tuple{NeuralQuantumStates.Hilberts.InfiniteUniformHilbert{T, N_DoF}}, Tuple{N_DoF}, Tuple{T}} where {T&lt;:Real, N_DoF}"><code>NeuralQuantumStates.Hilberts.n_lDoF</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.n_lDoF-Union{Tuple{N_DoF}, Tuple{NeuralQuantumStates.Hilberts.CompositeUniformHilbert{N_DoF}, Integer}} where N_DoF"><code>NeuralQuantumStates.Hilberts.n_lDoF</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.n_states-Union{Tuple{NeuralQuantumStates.Hilberts.InfiniteUniformHilbert{T, N_DoF}}, Tuple{N_DoF}, Tuple{T}} where {T&lt;:Real, N_DoF}"><code>NeuralQuantumStates.Hilberts.n_states</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.n_states-Union{Tuple{NeuralQuantumStates.Hilberts.FiniteUniformHilbert{T, N_DoF, N_lDoF}}, Tuple{N_lDoF}, Tuple{N_DoF}, Tuple{T}} where {T&lt;:Real, N_DoF, N_lDoF}"><code>NeuralQuantumStates.Hilberts.n_states</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.state_index_to_state-Union{Tuple{N_DoF}, Tuple{NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}, Int64}} where N_DoF"><code>NeuralQuantumStates.Hilberts.state_index_to_state</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.state_index_to_state-Union{Tuple{N_DoF}, Tuple{NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}, AbstractVector{Int64}}} where N_DoF"><code>NeuralQuantumStates.Hilberts.state_index_to_state</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.state_to_state_index-Union{Tuple{T}, Tuple{N_DoF}, Tuple{NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}, Tuple{Vararg{T, N_DoF}}}} where {N_DoF, T&lt;:Real}"><code>NeuralQuantumStates.Hilberts.state_to_state_index</code></a></li><li><a href="#NeuralQuantumStates.Hilberts.state_to_state_index-Union{Tuple{T}, Tuple{N_DoF}, Tuple{NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}, AbstractArray{Tuple{Vararg{T, N_DoF}}, 1}}} where {N_DoF, T&lt;:Real}"><code>NeuralQuantumStates.Hilberts.state_to_state_index</code></a></li><li><a href="#NeuralQuantumStates.Lattices.build-Union{Tuple{T}, Tuple{Tᵢ}, Tuple{Val{:Hypercube}, AbstractVector{Tᵢ}, T}} where {Tᵢ&lt;:Integer, T&lt;:Real}"><code>NeuralQuantumStates.Lattices.build</code></a></li><li><a href="#NeuralQuantumStates.Lattices.build-Union{Tuple{T}, Tuple{Tᵢ}, Tuple{Val{:Kagome}, AbstractVector{Tᵢ}, T}} where {Tᵢ&lt;:Integer, T&lt;:Real}"><code>NeuralQuantumStates.Lattices.build</code></a></li><li><a href="#NeuralQuantumStates.Lattices.build-Union{Tuple{T}, Tuple{Tᵢ}, Tuple{Val{:Triangular}, AbstractVector{Tᵢ}, T}} where {Tᵢ&lt;:Integer, T&lt;:Real}"><code>NeuralQuantumStates.Lattices.build</code></a></li><li><a href="#NeuralQuantumStates.Lattices.build-Union{Tuple{T}, Tuple{Tᵢ}, Tuple{Val{:Triclinic}, AbstractVector{Tᵢ}, AbstractVector{T}, AbstractVector{T}}} where {Tᵢ&lt;:Integer, T&lt;:Real}"><code>NeuralQuantumStates.Lattices.build</code></a></li><li><a href="#NeuralQuantumStates.Lattices.build-Union{Tuple{T}, Tuple{Tᵢ}, Tuple{Val{:Honeycomb}, AbstractVector{Tᵢ}, T}} where {Tᵢ&lt;:Integer, T&lt;:Real}"><code>NeuralQuantumStates.Lattices.build</code></a></li></ul>',3)),i("details",k,[i("summary",null,[s[0]||(s[0]=i("a",{id:"NeuralQuantumStates.Lattices.Lattice",href:"#NeuralQuantumStates.Lattices.Lattice"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Lattices.Lattice")],-1)),s[1]||(s[1]=t()),l(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[2]||(s[2]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattice{Tᵢ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,D,O}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NeuralQuantumStates.Lattices.AbstractLattice{Tᵢ,T,D,O}</span></span></code></pre></div><p>A <code>D</code>-dimensional <code>NeuralQuantumStates.Lattices.Lattice</code> of <code>shape</code> with given lattice <code>basis</code> and <code>periodic</code> boundary conditions.</p><p><strong>Fields</strong></p><ul><li><p><code>metagraph::MetaGraph{Tᵢ}</code>: A <code>MetaGraphsNext.MetaGraph</code> for the lattice to store its vertices and edges.</p></li><li><p><code>shape::SVector{D,Tᵢ}</code>: A vector for the shape of the lattice. It must contain <code>D</code> positive integers.</p></li><li><p><code>basis::NeuralQuantumStates.Lattices.AbstractLatticeBasis{T,D,O}</code>: A lattice basis for representing the unit cell of the lattice.</p></li><li><p><code>periodic::SVector{D,Bool}</code>: A vector for the periodic boundary condition of the lattice in each dimension.</p></li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,5))]),i("details",u,[i("summary",null,[s[3]||(s[3]=i("a",{id:"NeuralQuantumStates.Lattices.Lattice-Union{Tuple{L}, Tuple{O}, Tuple{D}, Tuple{T}, Tuple{Tᵢ}, Tuple{AbstractVector{Tᵢ}, NeuralQuantumStates.Lattices.AbstractLatticeBasis{T, D, O}, Tuple{AbstractArray{Tuple{L, L}, 1}, AbstractVector{Tᵢ}}, AbstractVector{Bool}}} where {Tᵢ<:Integer, T<:Real, D, O, L}",href:"#NeuralQuantumStates.Lattices.Lattice-Union{Tuple{L}, Tuple{O}, Tuple{D}, Tuple{T}, Tuple{Tᵢ}, Tuple{AbstractVector{Tᵢ}, NeuralQuantumStates.Lattices.AbstractLatticeBasis{T, D, O}, Tuple{AbstractArray{Tuple{L, L}, 1}, AbstractVector{Tᵢ}}, AbstractVector{Bool}}} where {Tᵢ<:Integer, T<:Real, D, O, L}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Lattices.Lattice")],-1)),s[4]||(s[4]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[5]||(s[5]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Lattice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    shape</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{Tᵢ}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    basis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NeuralQuantumStates.Lattices.AbstractLatticeBasis{T,D,O}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    custom_edges</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple{AbstractVector{NTuple{2,L}},AbstractVector{Tᵢ}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    periodic</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SVector{Bool}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, D)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Tᵢ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,D,O,L} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NeuralQuantumStates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattice{Tᵢ,T,D,O}</span></span></code></pre></div><p>Build a <code>D</code>-dimensional <code>NeuralQuantumStates.Lattices.Lattice</code> of <code>shape</code> by using the given lattice <code>basis</code>, <code>periodic</code> boundary conditions and <code>custom_edges</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>shape::AbstractVector{Tᵢ}</code>: A vector for the shape of the lattice. It must contain <code>D</code> positive integers.</p></li><li><p><code>basis::NeuralQuantumStates.Lattices.AbstractLatticeBasis{T,D,O}</code>: A lattice basis for representing the unit cell of the lattice.</p></li><li><p><code>custom_edges::Tuple{AbstractVector{NTuple{2,L}},AbstractVector{Tᵢ}}</code>: A tuple of two vectors for the custom edges to be added to the lattice. The first vector contains the lattice site labels of the edges to be added in the form of <code>NTuple{2,L}</code> where <code>L</code> is the type of the lattice site labels. The second vector is of positive integers for distingushing the edges to be added. These two vectors must have the same length.</p></li><li><p><code>periodic::AbstractVector{Bool}</code>: A vector for the periodic boundary condition of the lattice in each dimension. Defaults to <code>fill(false, D)</code>.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>NeuralQuantumStates.Lattices.Lattice{Tᵢ,T,D,O}</code>: The built <code>D</code>-dimensional <code>NeuralQuantumStates.Lattices.Lattice</code> of <code>shape</code> by using the given lattice <code>basis</code>, <code>periodic</code> boundary conditions and <code>custom_edges</code>.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))]),i("details",d,[i("summary",null,[s[6]||(s[6]=i("a",{id:"NeuralQuantumStates.Lattices.Lattice-Union{Tuple{L}, Tuple{O}, Tuple{D}, Tuple{T}, Tuple{Tᵢ}, Tuple{StaticArraysCore.SVector{D, Tᵢ}, NeuralQuantumStates.Lattices.AbstractLatticeBasis{T, D, O}, Tuple{AbstractArray{Tuple{L, L}, 1}, AbstractVector{Tᵢ}}, StaticArraysCore.SVector{D, Bool}}} where {Tᵢ<:Integer, T<:Real, D, O, L}",href:"#NeuralQuantumStates.Lattices.Lattice-Union{Tuple{L}, Tuple{O}, Tuple{D}, Tuple{T}, Tuple{Tᵢ}, Tuple{StaticArraysCore.SVector{D, Tᵢ}, NeuralQuantumStates.Lattices.AbstractLatticeBasis{T, D, O}, Tuple{AbstractArray{Tuple{L, L}, 1}, AbstractVector{Tᵢ}}, StaticArraysCore.SVector{D, Bool}}} where {Tᵢ<:Integer, T<:Real, D, O, L}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Lattices.Lattice")],-1)),s[7]||(s[7]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[8]||(s[8]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Lattice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    shape</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SVector{D,Tᵢ}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    basis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NeuralQuantumStates.Lattices.AbstractLatticeBasis{T,D,O}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    custom_edges</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple{AbstractVector{NTuple{2,L}},AbstractVector{Tᵢ}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    periodic</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SVector{D,Bool}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SVector{D,Bool}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, D))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Tᵢ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,D,O,L} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NeuralQuantumStates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattice{Tᵢ,T,D,O}</span></span></code></pre></div><p>Build a <code>D</code>-dimensional <code>NeuralQuantumStates.Lattices.Lattice</code> of <code>shape</code> by using the given lattice <code>basis</code>, <code>periodic</code> boundary conditions and <code>custom_edges</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>shape::SVector{D,Tᵢ}</code>: A vector for the shape of the lattice. It must contain <code>D</code> positive integers.</p></li><li><p><code>basis::NeuralQuantumStates.Lattices.AbstractLatticeBasis{T,D,O}</code>: A lattice basis for representing the unit cell of the lattice.</p></li><li><p><code>custom_edges::Tuple{AbstractVector{NTuple{2,L}},AbstractVector{Tᵢ}}</code>: A tuple of two vectors for the custom edges to be added to the lattice. The first vector contains the lattice site labels of the edges to be added in the form of <code>NTuple{2,L}</code> where <code>L</code> is the type of the lattice site labels. The second vector is of positive integers for distingushing the edges to be added. These two vectors must have the same length.</p></li><li><p><code>periodic::SVector{D,Bool}</code>: A vector for the periodic boundary condition of the lattice in each dimension. Defaults to <code>SVector{D,Bool}(fill(false, D))</code>.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>NeuralQuantumStates.Lattices.Lattice{Tᵢ,T,D,O}</code>: The built <code>D</code>-dimensional <code>NeuralQuantumStates.Lattices.Lattice</code> of <code>shape</code> by using the given lattice <code>basis</code>, <code>periodic</code> boundary conditions and <code>custom_edges</code>.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))]),i("details",c,[i("summary",null,[s[9]||(s[9]=i("a",{id:"NeuralQuantumStates.Lattices.Lattice-Union{Tuple{O}, Tuple{D}, Tuple{T}, Tuple{Tᵢ}, Tuple{AbstractVector{Tᵢ}, NeuralQuantumStates.Lattices.AbstractLatticeBasis{T, D, O}, AbstractVector{Bool}}} where {Tᵢ<:Integer, T<:Real, D, O}",href:"#NeuralQuantumStates.Lattices.Lattice-Union{Tuple{O}, Tuple{D}, Tuple{T}, Tuple{Tᵢ}, Tuple{AbstractVector{Tᵢ}, NeuralQuantumStates.Lattices.AbstractLatticeBasis{T, D, O}, AbstractVector{Bool}}} where {Tᵢ<:Integer, T<:Real, D, O}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Lattices.Lattice")],-1)),s[10]||(s[10]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[11]||(s[11]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Lattice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    shape</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{Tᵢ}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    basis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NeuralQuantumStates.Lattices.AbstractLatticeBasis{T,D,O}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    periodic</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{Bool}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, D);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    max_order</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tᵢ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tol_digits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tᵢ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dist_tol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0e-12</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Tᵢ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,D,O} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NeuralQuantumStates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattice{Tᵢ,T,D,O}</span></span></code></pre></div><p>Build a <code>D</code>-dimensional <code>NeuralQuantumStates.Lattices.Lattice</code> of <code>shape</code> by using the given lattice <code>basis</code> and <code>periodic</code> boundary conditions.</p><p><strong>Arguments</strong></p><ul><li><p><code>shape::AbstractVector{Tᵢ}</code>: A vector for the shape of the lattice. It must contain <code>D</code> positive integers.</p></li><li><p><code>basis::NeuralQuantumStates.Lattices.AbstractLatticeBasis{T,D,O}</code>: A lattice basis for representing the unit cell of the lattice.</p></li><li><p><code>periodic::AbstractVector{Bool}</code>: A vector for the periodic boundary condition of the lattice in each dimension. Defaults to <code>fill(false, D)</code>.</p></li></ul><p><strong>Keywords</strong></p><ul><li><p><code>max_order::Tᵢ</code>: An integer for the maximum order of the edges to be included in the lattice as <code>max_order</code>-nearest neighbors. Defaults to <code>1</code>, which means only nearest neighbors are included. For example, if it is set to <code>2</code>, then nearest and next-nearest neighbors are included.</p></li><li><p><code>tol_digits::Tᵢ</code>: An integer for the number of digits to round the calculated distances to. Defaults to <code>12</code>.</p></li><li><p><code>dist_tol::T</code>: A positive number for the tolerance of the distance between two lattice sites to be considered as the same site. Defaults to <code>1.0e-12</code>.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>NeuralQuantumStates.Lattices.Lattice{Tᵢ,T,D,O}</code>: The built <code>D</code>-dimensional <code>NeuralQuantumStates.Lattices.Lattice</code> of <code>shape</code> by using the given lattice <code>basis</code> and <code>periodic</code> boundary conditions.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,9))]),i("details",g,[i("summary",null,[s[12]||(s[12]=i("a",{id:"NeuralQuantumStates.Lattices.Lattice-Union{Tuple{O}, Tuple{D}, Tuple{T}, Tuple{Tᵢ}, Tuple{StaticArraysCore.SVector{D, Tᵢ}, NeuralQuantumStates.Lattices.AbstractLatticeBasis{T, D, O}, StaticArraysCore.SVector{D, Bool}}} where {Tᵢ<:Integer, T<:Real, D, O}",href:"#NeuralQuantumStates.Lattices.Lattice-Union{Tuple{O}, Tuple{D}, Tuple{T}, Tuple{Tᵢ}, Tuple{StaticArraysCore.SVector{D, Tᵢ}, NeuralQuantumStates.Lattices.AbstractLatticeBasis{T, D, O}, StaticArraysCore.SVector{D, Bool}}} where {Tᵢ<:Integer, T<:Real, D, O}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Lattices.Lattice")],-1)),s[13]||(s[13]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[14]||(s[14]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Lattice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    shape</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SVector{D,Tᵢ}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    basis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NeuralQuantumStates.Lattices.AbstractLatticeBasis{T,D,O}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    periodic</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SVector{D,Bool}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SVector{D,Bool}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, D));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    max_order</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tᵢ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tol_digits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tᵢ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dist_tol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0e-12</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Tᵢ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,D,O} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NeuralQuantumStates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattice{Tᵢ,T,D,O}</span></span></code></pre></div><p>Build a <code>D</code>-dimensional <code>NeuralQuantumStates.Lattices.Lattice</code> of <code>shape</code> by using the given lattice <code>basis</code> and <code>periodic</code> boundary conditions.</p><p><strong>Arguments</strong></p><ul><li><p><code>shape::SVector{D,Tᵢ}</code>: A vector for the shape of the lattice. It must contain <code>D</code> positive integers.</p></li><li><p><code>basis::NeuralQuantumStates.Lattices.AbstractLatticeBasis{T,D,O}</code>: A lattice basis for representing the unit cell of the lattice.</p></li><li><p><code>periodic::SVector{D,Bool}</code>: A vector for the periodic boundary condition of the lattice in each dimension. Defaults to <code>SVector{D,Bool}(fill(false, D))</code>.</p></li></ul><p><strong>Keywords</strong></p><ul><li><p><code>max_order::Tᵢ</code>: An integer for the maximum order of the edges to be included in the lattice as <code>max_order</code>-nearest neighbors. Defaults to <code>1</code>, which means only nearest neighbors are included. For example, if it is set to <code>2</code>, then nearest and next-nearest neighbors are included.</p></li><li><p><code>tol_digits::Tᵢ</code>: An integer for the number of digits to round the calculated distances to. Defaults to <code>12</code>.</p></li><li><p><code>dist_tol::T</code>: A positive number for the tolerance of the distance between two lattice sites to be considered as the same site. Defaults to <code>1.0e-12</code>.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>NeuralQuantumStates.Lattices.Lattice{Tᵢ,T,D,O}</code>: The built <code>D</code>-dimensional <code>NeuralQuantumStates.Lattices.Lattice</code> of <code>shape</code> by using the given lattice <code>basis</code> and <code>periodic</code> boundary conditions.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,9))]),i("details",E,[i("summary",null,[s[15]||(s[15]=i("a",{id:"NeuralQuantumStates.Lattices.LatticeBasis",href:"#NeuralQuantumStates.Lattices.LatticeBasis"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Lattices.LatticeBasis")],-1)),s[16]||(s[16]=t()),l(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[31]||(s[31]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LatticeBasis{T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,D,O} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NeuralQuantumStates.Lattices.AbstractLatticeBasis{T,D,O}</span></span></code></pre></div><p>A lattice basis for representing the unit cell of a <code>D</code>-dimensional lattice with <code>O</code> site offsets.</p><p><strong>Fields</strong></p>',3)),i("ul",null,[i("li",null,[i("p",null,[s[19]||(s[19]=i("code",null,"vectors::SMatrix{D,D,T}",-1)),s[20]||(s[20]=t(": A ")),s[21]||(s[21]=i("code",null,"D",-1)),i("mjx-container",b,[(r(),n("svg",y,s[17]||(s[17]=[i("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[i("g",{"data-mml-node":"math"},[i("g",{"data-mml-node":"mo"},[i("path",{"data-c":"D7",d:"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z",style:{"stroke-width":"3"}})])])],-1)]))),s[18]||(s[18]=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mo",null,"×")])],-1))]),s[22]||(s[22]=i("code",null,"D",-1)),s[23]||(s[23]=t(" square matrix for the primitive vectors defining the unit cell."))])]),i("li",null,[i("p",null,[s[26]||(s[26]=i("code",null,"site_offsets::SMatrix{D,O,T}",-1)),s[27]||(s[27]=t(": A ")),s[28]||(s[28]=i("code",null,"D",-1)),i("mjx-container",m,[(r(),n("svg",T,s[24]||(s[24]=[i("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[i("g",{"data-mml-node":"math"},[i("g",{"data-mml-node":"mo"},[i("path",{"data-c":"D7",d:"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z",style:{"stroke-width":"3"}})])])],-1)]))),s[25]||(s[25]=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mo",null,"×")])],-1))]),s[29]||(s[29]=i("code",null,"O",-1)),s[30]||(s[30]=t(" matrix for the site offsets of the lattice basis in the unit cell."))])])]),s[32]||(s[32]=i("p",null,[i("a",{href:"./github.com/cevenkadir/NeuralQuantumStates.jl"},"source")],-1))]),i("details",F,[i("summary",null,[s[33]||(s[33]=i("a",{id:"NeuralQuantumStates.Lattices.LatticeBasis-Union{Tuple{T}, Tuple{AbstractMatrix{T}, AbstractMatrix{T}}} where T<:Real",href:"#NeuralQuantumStates.Lattices.LatticeBasis-Union{Tuple{T}, Tuple{AbstractMatrix{T}, AbstractMatrix{T}}} where T<:Real"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Lattices.LatticeBasis")],-1)),s[34]||(s[34]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[35]||(s[35]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LatticeBasis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vectors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    site_offsets</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{T}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">zeros</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vectors)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NeuralQuantumStates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LatticeBasis{T,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vectors)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(site_offsets)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]}</span></span></code></pre></div><p>Define a <code>NeuralQuantumStates.Lattices.LatticeBasis</code> for representing the unit cell of a <code>size(vectors)[1]</code>-dimensional lattice with the given primitive <code>vectors</code> and <code>site_offsets</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>vectors::AbstractMatrix{T}</code>: A square matrix for the primitive vectors defining the unit cell. Each column of the matrix is a primitive vector.</p></li><li><p><code>site_offsets::AbstractMatrix{T}</code>: A matrix for the site offsets of the lattice basis in the unit cell. Each column of the matrix is a site offset vector. Defaults to <code>zeros(T, size(vectors)[1], 1)</code>.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>NeuralQuantumStates.Lattices.LatticeBasis{T,size(vectors)[1],size(site_offsets)[2]}</code>: The defined <code>NeuralQuantumStates.Lattices.LatticeBasis</code> for representing the unit cell of a <code>size(vectors)[1]</code>-dimensional lattice with the given primitive <code>vectors</code> and <code>site_offsets</code>.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))]),i("details",f,[i("summary",null,[s[36]||(s[36]=i("a",{id:"NeuralQuantumStates.Lattices.LatticeBasis-Union{Tuple{T}, Tuple{AbstractMatrix{T}, AbstractVector{T}}} where T<:Real",href:"#NeuralQuantumStates.Lattices.LatticeBasis-Union{Tuple{T}, Tuple{AbstractMatrix{T}, AbstractVector{T}}} where T<:Real"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Lattices.LatticeBasis")],-1)),s[37]||(s[37]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[38]||(s[38]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LatticeBasis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vectors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    site_offset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{T}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">zeros</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vectors)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NeuralQuantumStates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LatticeBasis{T,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vectors)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Define a <code>NeuralQuantumStates.Lattices.LatticeBasis</code> for representing the unit cell of a <code>size(vectors)[1]</code>-dimensional lattice with the given primitive <code>vectors</code> and <code>site_offset</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>vectors::AbstractMatrix{T}</code>: A square matrix for the primitive vectors defining the unit cell. Each column of the matrix is a primitive vector.</p></li><li><p><code>site_offset::AbstractVector{T}</code>: A vector for one site offset of the lattice basis in the unit cell. Defaults to <code>zeros(T, size(vectors)[1])</code>.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>NeuralQuantumStates.Lattices.LatticeBasis{T,size(vectors)[1],1}</code>: The defined <code>NeuralQuantumStates.Lattices.LatticeBasis</code> for representing the unit cell of a <code>size(vectors)[1]</code>-dimensional lattice with the given primitive <code>vectors</code> and <code>site_offset</code>.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))]),i("details",N,[i("summary",null,[s[39]||(s[39]=i("a",{id:"NeuralQuantumStates.Lattices.LatticeBasis-Union{Tuple{T}, Tuple{AbstractVector{<:AbstractVector{T}}, AbstractVector{<:AbstractVector{T}}}} where T<:Real",href:"#NeuralQuantumStates.Lattices.LatticeBasis-Union{Tuple{T}, Tuple{AbstractVector{<:AbstractVector{T}}, AbstractVector{<:AbstractVector{T}}}} where T<:Real"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Lattices.LatticeBasis")],-1)),s[40]||(s[40]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[41]||(s[41]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LatticeBasis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vectors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{&lt;:AbstractVector{T}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    site_offsets</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{&lt;:AbstractVector{T}}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">zeros</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vectors[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]))]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NeuralQuantumStates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LatticeBasis{T,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vectors[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]),</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(site_offsets)}</span></span></code></pre></div><p>Define a <code>NeuralQuantumStates.Lattices.LatticeBasis</code> for representing the unit cell of a <code>length(vectors[1])</code>-dimensional lattice with the given primitive <code>vectors</code> and <code>site_offsets</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>vectors::AbstractVector{&lt;:AbstractVector{T}}</code>: A vector of primitive vectors defining the unit cell. Each element of the vector should be a primitive vector with the same dimension.</p></li><li><p><code>site_offsets::AbstractVector{&lt;:AbstractVector{T}}</code>: A vector of site offsets of the lattice basis in the unit cell. Each element of the vector should be a site offset vector with the same dimension. Defaults to <code>[zeros(T, length(vectors[1]))]</code>.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>NeuralQuantumStates.Lattices.LatticeBasis{T,length(vectors[1]),length(site_offsets)}</code>: The defined <code>NeuralQuantumStates.Lattices.LatticeBasis</code> for representing the unit cell of a <code>length(vectors[1])</code>-dimensional lattice with the given primitive <code>vectors</code> and <code>site_offsets</code>.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))]),i("details",D,[i("summary",null,[s[42]||(s[42]=i("a",{id:"NeuralQuantumStates.Lattices.LatticeBasis-Union{Tuple{T}, Tuple{T, AbstractVector{T}}} where T<:Real",href:"#NeuralQuantumStates.Lattices.LatticeBasis-Union{Tuple{T}, Tuple{T, AbstractVector{T}}} where T<:Real"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Lattices.LatticeBasis")],-1)),s[43]||(s[43]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[44]||(s[44]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LatticeBasis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, site_offsets</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{T}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NeuralQuantumStates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LatticeBasis{T,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(site_offsets)}</span></span></code></pre></div><p>Define a lattice basis for representing the unit cell of a 1D lattice with <code>length(site_offsets)</code> site offsets.</p><p><strong>Arguments</strong></p><ul><li><p><code>vector::T</code>: A real number for a primitive vector defining the unit cell.</p></li><li><p><code>site_offsets::AbstractVector{T}</code>: A vector for the site offsets of the lattice basis in the unit cell.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>NeuralQuantumStates.Lattices.LatticeBasis{T,1,length(site_offsets)}</code>: The defined lattice basis of a 1D lattice with <code>length(site_offsets)</code> site offsets.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))]),i("details",C,[i("summary",null,[s[45]||(s[45]=i("a",{id:"NeuralQuantumStates.Lattices.LatticeBasis-Union{Tuple{T}, Tuple{T, T}} where T<:Real",href:"#NeuralQuantumStates.Lattices.LatticeBasis-Union{Tuple{T}, Tuple{T, T}} where T<:Real"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Lattices.LatticeBasis")],-1)),s[46]||(s[46]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[47]||(s[47]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LatticeBasis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, site_offset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NeuralQuantumStates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LatticeBasis{T,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Define a <code>NeuralQuantumStates.Lattices.LatticeBasis</code> for representing the unit cell of a 1D lattice with the given primitive <code>vector</code> and <code>site_offset</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>vector::T</code>: A real number for a primitive vector defining the unit cell.</p></li><li><p><code>site_offset::T</code>: A real number for the site offset of the lattice basis in the unit cell. Defaults to <code>T(0.0)</code>.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>NeuralQuantumStates.Lattices.LatticeBasis{T,1,1}</code>: The defined lattice basis of a 1D lattice with the given primitive <code>vector</code> and <code>site_offset</code>.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))]),i("details",A,[i("summary",null,[s[48]||(s[48]=i("a",{id:"NeuralQuantumStates.Lattices.build-Union{Tuple{T}, Tuple{Tᵢ}, Tuple{Val{:Honeycomb}, AbstractVector{Tᵢ}, T}} where {Tᵢ<:Integer, T<:Real}",href:"#NeuralQuantumStates.Lattices.build-Union{Tuple{T}, Tuple{Tᵢ}, Tuple{Val{:Honeycomb}, AbstractVector{Tᵢ}, T}} where {Tᵢ<:Integer, T<:Real}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Lattices.build")],-1)),s[49]||(s[49]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[50]||(s[50]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Val{:Honeycomb}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    shape</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{Tᵢ}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    edge_length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    periodic</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Bool,AbstractVector{Bool}}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tol_digits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tᵢ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TOL_DIGITS,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dist_tol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DIST_TOL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Tᵢ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NeuralQuantumStates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattice{Tᵢ,T,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Build a 2D honeycomb lattice from the given parameters.</p><p><strong>Arguments</strong></p><ul><li><p><code>shape::AbstractVector{Tᵢ}</code>: A vector for the shape of the lattice. It must contain two positive integers.</p></li><li><p><code>edge_length::T</code>: A positive number for the edge length of the lattice.</p></li></ul><p><strong>Keywords</strong></p><ul><li><p><code>periodic::Union{Bool,AbstractVector{Bool}}</code>: A boolean or a vector for the periodic boundary condition of the lattice in each dimension. If it is a boolean, then it is applied to all dimensions. If it is a vector, then it must contain two booleans. Defaults to <code>false</code>.</p></li><li><p><code>tol_digits::Tᵢ</code>: An integer for the number of digits to round the calculated distances to. Defaults to <code>12</code>.</p></li><li><p><code>dist_tol::T</code>: A positive number for the tolerance of the distance between two lattice sites to be considered as the same site. Defaults to <code>1.0e-12</code>.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>NeuralQuantumStates.Lattices.Lattice{Tᵢ,T,2,2}</code>: The built 2D honeycomb lattice from the given parameters.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,9))]),i("details",S,[i("summary",null,[s[51]||(s[51]=i("a",{id:"NeuralQuantumStates.Lattices.build-Union{Tuple{T}, Tuple{Tᵢ}, Tuple{Val{:Hypercube}, AbstractVector{Tᵢ}, T}} where {Tᵢ<:Integer, T<:Real}",href:"#NeuralQuantumStates.Lattices.build-Union{Tuple{T}, Tuple{Tᵢ}, Tuple{Val{:Hypercube}, AbstractVector{Tᵢ}, T}} where {Tᵢ<:Integer, T<:Real}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Lattices.build")],-1)),s[52]||(s[52]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[53]||(s[53]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Val{:Hypercube}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    shape</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{Tᵢ}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    edge_length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    periodic</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Bool,AbstractVector{Bool}}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Tᵢ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NeuralQuantumStates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattice{Tᵢ,T,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(shape),</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Build a hypercubic lattice from the given parameters.</p><p><strong>Arguments</strong></p><ul><li><p><code>::Val{:Hypercube}</code>: A value to dispatch to this function.</p></li><li><p><code>shape::AbstractVector{Tᵢ}</code>: A vector for the shape of the lattice.</p></li><li><p><code>edge_length::T</code>: A positive number for the edge length of the lattice.</p></li></ul><p><strong>Keywords</strong></p><ul><li><code>periodic::Union{Bool,AbstractVector{Bool}}</code>: A boolean or a vector for the periodic boundary condition of the lattice in each dimension. If it is a boolean, then it is applied to all dimensions. If it is a vector, then it must contain <code>length(shape)</code> booleans. Defaults to <code>false</code>.</li></ul><p><strong>Returns</strong></p><ul><li><code>NeuralQuantumStates.Lattices.Lattice{Tᵢ,T,length(shape),1}</code>: The built hypercubic lattice from the given parameters.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,9))]),i("details",v,[i("summary",null,[s[54]||(s[54]=i("a",{id:"NeuralQuantumStates.Lattices.build-Union{Tuple{T}, Tuple{Tᵢ}, Tuple{Val{:Kagome}, AbstractVector{Tᵢ}, T}} where {Tᵢ<:Integer, T<:Real}",href:"#NeuralQuantumStates.Lattices.build-Union{Tuple{T}, Tuple{Tᵢ}, Tuple{Val{:Kagome}, AbstractVector{Tᵢ}, T}} where {Tᵢ<:Integer, T<:Real}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Lattices.build")],-1)),s[55]||(s[55]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[56]||(s[56]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Val{:Kagome}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    shape</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{Tᵢ}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    edge_length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    periodic</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Bool,AbstractVector{Bool}}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tol_digits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tᵢ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TOL_DIGITS,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dist_tol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DIST_TOL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Tᵢ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NeuralQuantumStates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattice{Tᵢ,T,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Build a 2D kagome lattice from the given parameters.</p><p><strong>Arguments</strong></p><ul><li><p><code>shape::AbstractVector{Tᵢ}</code>: A vector for the shape of the lattice. It must contain two positive integers.</p></li><li><p><code>edge_length::T</code>: A positive number for the edge length of the lattice.</p></li></ul><p><strong>Keywords</strong></p><ul><li><p><code>periodic::Union{Bool,AbstractVector{Bool}}</code>: A boolean or a vector for the periodic boundary condition of the lattice in each dimension. If it is a boolean, then it is applied to all dimensions. If it is a vector, then it must contain two booleans. Defaults to <code>false</code>.</p></li><li><p><code>tol_digits::Tᵢ</code>: An integer for the number of digits to round the calculated distances to. Defaults to <code>12</code>.</p></li><li><p><code>dist_tol::T</code>: A positive number for the tolerance of the distance between two lattice sites to be considered as the same site. Defaults to <code>1.0e-12</code>.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>NeuralQuantumStates.Lattices.Lattice{Tᵢ,T,2,3}</code>: The built 2D kagome lattice from the given parameters.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,9))]),i("details",H,[i("summary",null,[s[57]||(s[57]=i("a",{id:"NeuralQuantumStates.Lattices.build-Union{Tuple{T}, Tuple{Tᵢ}, Tuple{Val{:Triangular}, AbstractVector{Tᵢ}, T}} where {Tᵢ<:Integer, T<:Real}",href:"#NeuralQuantumStates.Lattices.build-Union{Tuple{T}, Tuple{Tᵢ}, Tuple{Val{:Triangular}, AbstractVector{Tᵢ}, T}} where {Tᵢ<:Integer, T<:Real}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Lattices.build")],-1)),s[58]||(s[58]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[59]||(s[59]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Val{:Triangular}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    shape</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{Tᵢ}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    edge_length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    periodic</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Bool,AbstractVector{Bool}}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tol_digits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tᵢ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TOL_DIGITS,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dist_tol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DIST_TOL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Tᵢ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NeuralQuantumStates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattice{Tᵢ,T,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Build a 2D triangular lattice from the given parameters.</p><p><strong>Arguments</strong></p><ul><li><p><code>::Val{:Triangular}</code>: A value to dispatch to this function.</p></li><li><p><code>shape::AbstractVector{Tᵢ}</code>: A vector for the shape of the lattice. It must contain two positive integers.</p></li><li><p><code>edge_length::T</code>: A positive number for the edge length of the lattice.</p></li></ul><p><strong>Keywords</strong></p><ul><li><p><code>periodic::Union{Bool,AbstractVector{Bool}}</code>: A boolean or a vector for the periodic boundary condition of the lattice in each dimension. If it is a boolean, then it is applied to all dimensions. If it is a vector, then it must contain two booleans. Defaults to <code>false</code>.</p></li><li><p><code>tol_digits::Tᵢ</code>: An integer for the number of digits to round the calculated distances to. Defaults to <code>12</code>.</p></li><li><p><code>dist_tol::T</code>: A positive number for the tolerance of the distance between two lattice sites to be considered as the same site. Defaults to <code>1.0e-12</code>.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>NeuralQuantumStates.Lattices.Lattice{Tᵢ,T,2,1}</code>: The built 2D triangular lattice from the given parameters.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,9))]),i("details",Q,[i("summary",null,[s[60]||(s[60]=i("a",{id:"NeuralQuantumStates.Lattices.build-Union{Tuple{T}, Tuple{Tᵢ}, Tuple{Val{:Triclinic}, AbstractVector{Tᵢ}, AbstractVector{T}, AbstractVector{T}}} where {Tᵢ<:Integer, T<:Real}",href:"#NeuralQuantumStates.Lattices.build-Union{Tuple{T}, Tuple{Tᵢ}, Tuple{Val{:Triclinic}, AbstractVector{Tᵢ}, AbstractVector{T}, AbstractVector{T}}} where {Tᵢ<:Integer, T<:Real}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Lattices.build")],-1)),s[61]||(s[61]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[62]||(s[62]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Val{:Triclinic}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    shape</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{Tᵢ}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    edge_lengths</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    angles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    periodic</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Bool,AbstractVector{Bool}}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {Tᵢ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NeuralQuantumStates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Lattice{Tᵢ,T,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Build a triclinic lattice from the given parameters.</p><p><strong>Arguments</strong></p><ul><li><p><code>::Val{:Triclinic}</code>: A value to dispatch to this function.</p></li><li><p><code>shape::AbstractVector{Tᵢ}</code>: A vector for the shape of the lattice. It must contain three positive integers.</p></li><li><p><code>edge_lengths::AbstractVector{T}</code>: A vector for the edge lengths of the lattice. It must contain three positive numbers.</p></li><li><p><code>angles::AbstractVector{T}</code>: A vector for the angles in degrees between the edge lengths of the lattice. It must contain three numbers. <code>angles[i]</code> is the angle between <code>edge_lengths[j]</code> and <code>edge_lengths[k]</code> where <code>(i,j,k)</code> is a permutation of <code>(1,2,3)</code>.</p></li></ul><p><strong>Keywords</strong></p><ul><li><code>periodic::Union{Bool,AbstractVector{Bool}}</code>: A boolean or a vector for the periodic boundary condition of the lattice in each dimension. If it is a boolean, then it is applied to all dimensions. If it is a vector, then it must contain three booleans. Defaults to <code>false</code>.</li></ul><p><strong>Returns</strong></p><ul><li><code>NeuralQuantumStates.Lattices.Lattice{Tᵢ,T,3,1}</code>: The built triclinic lattice from the given parameters.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,9))]),i("details",B,[i("summary",null,[s[63]||(s[63]=i("a",{id:"NeuralQuantumStates.Hilberts.CompositeSumConstraint",href:"#NeuralQuantumStates.Hilberts.CompositeSumConstraint"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.CompositeSumConstraint")],-1)),s[64]||(s[64]=t()),l(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[65]||(s[65]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CompositeSumConstraint{T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,N_HS}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NeuralQuantumStates.Hilberts.CompositeDiscreteHilbertConstraint</span></span></code></pre></div><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,2))]),i("details",j,[i("summary",null,[s[66]||(s[66]=i("a",{id:"NeuralQuantumStates.Hilberts.CompositeUniformHilbert",href:"#NeuralQuantumStates.Hilberts.CompositeUniformHilbert"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.CompositeUniformHilbert")],-1)),s[67]||(s[67]=t()),l(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[68]||(s[68]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CompositeUniformHilbert{N,N_DoF} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}</span></span></code></pre></div><p>A composite uniform Hilbert space.</p><p><strong>Fields</strong></p><ul><li><p><code>hilberts::NTuple{N,NeuralQuantumStates.Hilberts.UniformHilbert}</code>: Uniform Hilbert spaces to be composed.</p></li><li><p><code>composite_constraint::NeuralQuantumStates.Hilberts.AbstractCompositeDiscreteHilbertConstraint</code>: A constraint to the composite uniform Hilbert space.</p></li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>',5))]),i("details",_,[i("summary",null,[s[69]||(s[69]=i("a",{id:"NeuralQuantumStates.Hilberts.FiniteUniformHilbert",href:"#NeuralQuantumStates.Hilberts.FiniteUniformHilbert"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.FiniteUniformHilbert")],-1)),s[70]||(s[70]=t()),l(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[71]||(s[71]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FiniteUniformHilbert{T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,N_DoF,N_lDoF}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}</span></span></code></pre></div><p>A finite uniform Hilbert space.</p><p><strong>Fields</strong></p><ul><li><p><code>lDoF::SVector{N_lDoF,T}</code>: Local degrees of freedom.</p></li><li><p><code>constraint::NeuralQuantumStates.Hilberts.AbstractDiscreteHilbertConstraint</code>: A constraint to the uniform Hilbert space.</p></li><li><p><code>type::Symbol</code>: The type of the uniform Hilbert space.</p></li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,5))]),i("details",L,[i("summary",null,[s[72]||(s[72]=i("a",{id:"NeuralQuantumStates.Hilberts.InfiniteUniformHilbert",href:"#NeuralQuantumStates.Hilberts.InfiniteUniformHilbert"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.InfiniteUniformHilbert")],-1)),s[73]||(s[73]=t()),l(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[74]||(s[74]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">InfiniteUniformHilbert{T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,N_DoF}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}</span></span></code></pre></div><p>An infinite uniform Hilbert space.</p><p><strong>Fields</strong></p><ul><li><code>type::Symbol</code>: The type of the uniform Hilbert space.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,5))]),i("details",w,[i("summary",null,[s[75]||(s[75]=i("a",{id:"NeuralQuantumStates.Hilberts.NoCompositeDiscreteHilbertConstraint",href:"#NeuralQuantumStates.Hilberts.NoCompositeDiscreteHilbertConstraint"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.NoCompositeDiscreteHilbertConstraint")],-1)),s[76]||(s[76]=t()),l(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[77]||(s[77]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NoCompositeDiscreteHilbertConstraint</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NeuralQuantumStates.Hilberts.AbstractCompositeDiscreteHilbertConstraint</span></span></code></pre></div><p>A constraint that does not introduce any constraint to the composite discrete Hilbert space.</p><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,3))]),i("details",x,[i("summary",null,[s[78]||(s[78]=i("a",{id:"NeuralQuantumStates.Hilberts.NoDiscreteHilbertConstraint",href:"#NeuralQuantumStates.Hilberts.NoDiscreteHilbertConstraint"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.NoDiscreteHilbertConstraint")],-1)),s[79]||(s[79]=t()),l(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[80]||(s[80]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NoDiscreteHilbertConstraint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NeuralQuantumStates.Hilberts.AbstractDiscreteHilbertConstraint</span></span></code></pre></div><p>A constraint that does not introduce any constraint to the discrete Hilbert space.</p><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>',3))]),i("details",U,[i("summary",null,[s[81]||(s[81]=i("a",{id:"NeuralQuantumStates.Hilberts.SumConstraint",href:"#NeuralQuantumStates.Hilberts.SumConstraint"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.SumConstraint")],-1)),s[82]||(s[82]=t()),l(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[83]||(s[83]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SumConstraint{T&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NeuralQuantumStates.Hilberts.DiscreteHilbertConstraint</span></span></code></pre></div><p>A constraint introducing that the sum of the elements of a given state is equal to a given value.</p><p><strong>Fields</strong></p><ul><li><code>sum_value::T</code>: The value that the sum of the elements of a given state must be equal to.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,5))]),i("details",V,[i("summary",null,[s[84]||(s[84]=i("a",{id:"NeuralQuantumStates.Hilberts.:⊗-Tuple{Vararg{NeuralQuantumStates.Hilberts.UniformHilbert}}",href:"#NeuralQuantumStates.Hilberts.:⊗-Tuple{Vararg{NeuralQuantumStates.Hilberts.UniformHilbert}}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.:⊗")],-1)),s[85]||(s[85]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[86]||(s[86]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">⊗</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (hilberts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NeuralQuantumStates.Hilberts.UniformHilbert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    composite_constraint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NeuralQuantumStates.Hilberts.AbstractCompositeDiscreteHilbertConstraint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NeuralQuantumStates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hilberts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NoCompositeDiscreteHilbertConstraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NeuralQuantumStates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hilberts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CompositeUniformHilbert</span></span></code></pre></div><p>Return a composite uniform Hilbert space by taking the tensor product of the given uniform Hilbert spaces.</p><p><strong>Arguments</strong></p><ul><li><p><code>hilberts::NeuralQuantumStates.Hilberts.UniformHilbert</code>: The uniform Hilbert spaces to be tensor producted.</p></li><li><p><code>composite_constraint::NeuralQuantumStates.Hilberts.AbstractCompositeDiscreteHilbertConstraint</code>: The composite constraint to be applied. Default is <code>NeuralQuantumStates.Hilberts.NoCompositeDiscreteHilbertConstraint()</code>.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>NeuralQuantumStates.Hilberts.CompositeUniformHilbert</code>: The generated composite uniform Hilbert space.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))]),i("details",R,[i("summary",null,[s[87]||(s[87]=i("a",{id:"NeuralQuantumStates.Hilberts.all_states-Union{Tuple{NeuralQuantumStates.Hilberts.CompositeUniformHilbert{N, N_DoF}}, Tuple{N_DoF}, Tuple{N}} where {N, N_DoF}",href:"#NeuralQuantumStates.Hilberts.all_states-Union{Tuple{NeuralQuantumStates.Hilberts.CompositeUniformHilbert{N, N_DoF}}, Tuple{N_DoF}, Tuple{N}} where {N, N_DoF}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.all_states")],-1)),s[88]||(s[88]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[89]||(s[89]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">all_states</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hilbert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NeuralQuantumStates.Hilberts.CompositeUniformHilbert{N,N_DoF}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {N,N_DoF} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vector{NTuple}</span></span></code></pre></div><p>Return all states in the given composite uniform Hilbert space.</p><p><strong>Arguments</strong></p><ul><li><code>hilbert::NeuralQuantumStates.Hilberts.CompositeUniformHilbert{N,N_DoF}</code>: The composite uniform Hilbert space.</li></ul><p><strong>Returns</strong></p><ul><li><code>Vector{NTuple}</code>: All states in the given composite uniform Hilbert space.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))]),i("details",I,[i("summary",null,[s[90]||(s[90]=i("a",{id:"NeuralQuantumStates.Hilberts.all_states-Union{Tuple{NeuralQuantumStates.Hilberts.FiniteUniformHilbert{T, N_DoF, N_lDoF}}, Tuple{N_lDoF}, Tuple{N_DoF}, Tuple{T}} where {T<:Real, N_DoF, N_lDoF}",href:"#NeuralQuantumStates.Hilberts.all_states-Union{Tuple{NeuralQuantumStates.Hilberts.FiniteUniformHilbert{T, N_DoF, N_lDoF}}, Tuple{N_lDoF}, Tuple{N_DoF}, Tuple{T}} where {T<:Real, N_DoF, N_lDoF}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.all_states")],-1)),s[91]||(s[91]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[92]||(s[92]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">all_states</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hilbert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NeuralQuantumStates.Hilberts.FiniteUniformHilbert{T,N_DoF,N_lDoF}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,N_DoF,N_lDoF} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vector{NTuple{N_DoF,T}}</span></span></code></pre></div><p>Return all states in the given finite uniform Hilbert space.</p><p><strong>Arguments</strong></p><ul><li><code>hilbert::NeuralQuantumStates.Hilberts.FiniteUniformHilbert{T,N_DoF,N_lDoF}</code>: The finite uniform Hilbert space.</li></ul><p><strong>Returns</strong></p><ul><li><code>Vector{NTuple{N_DoF,T}}</code>: All states in the given finite uniform Hilbert space.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))]),i("details",O,[i("summary",null,[s[93]||(s[93]=i("a",{id:"NeuralQuantumStates.Hilberts.all_states-Union{Tuple{NeuralQuantumStates.Hilberts.InfiniteUniformHilbert{T, N_DoF}}, Tuple{N_DoF}, Tuple{T}} where {T<:Real, N_DoF}",href:"#NeuralQuantumStates.Hilberts.all_states-Union{Tuple{NeuralQuantumStates.Hilberts.InfiniteUniformHilbert{T, N_DoF}}, Tuple{N_DoF}, Tuple{T}} where {T<:Real, N_DoF}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.all_states")],-1)),s[94]||(s[94]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[95]||(s[95]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">all_states</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hilbert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Hilberts.InfiniteUniformHilbert{T,N_DoF}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,N_DoF}</span></span></code></pre></div><p>Throws an <code>OverflowError</code> since the Hilbert space is infinite.</p><p><strong>Arguments</strong></p><ul><li><code>hilbert::NeuralQuantumStates.Hilberts.InfiniteUniformHilbert{T,N_DoF}</code>: The infinite uniform Hilbert space.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,5))]),i("details",M,[i("summary",null,[s[96]||(s[96]=i("a",{id:"NeuralQuantumStates.Hilberts.build-Union{Tuple{T_Sz}, Tuple{T}, Tuple{Val{:Spin}, T, Integer}} where {T<:Union{Integer, Rational}, T_Sz<:Real}",href:"#NeuralQuantumStates.Hilberts.build-Union{Tuple{T_Sz}, Tuple{T}, Tuple{Val{:Spin}, T, Integer}} where {T<:Union{Integer, Rational}, T_Sz<:Real}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.build")],-1)),s[97]||(s[97]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[98]||(s[98]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Val{:Spin}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, N</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; ∑Sz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{T_Sz,Nothing}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Rational,Integer}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,T_Sz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NeuralQuantumStates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hilberts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FiniteUniformHilbert</span></span></code></pre></div><p>Build a finite uniform Hilbert space for a spin-<code>s</code> system.</p><p><strong>Arguments</strong></p><ul><li><p><code>s::T</code>: Spin of the system.</p></li><li><p><code>N::Integer</code>: Number of degrees of freedom.</p></li><li><p><code>∑Sz::Union{T_Sz,Nothing}</code>: The total magnetization to be conserved. Default is <code>nothing</code>.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>NeuralQuantumStates.Hilberts.FiniteUniformHilbert</code>: The finite uniform Hilbert space for a spin-<code>s</code> system.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))]),i("details",z,[i("summary",null,[s[99]||(s[99]=i("a",{id:"NeuralQuantumStates.Hilberts.build-Union{Tuple{T_n}, Tuple{T}, Tuple{Val{:Fock}, T, Integer}} where {T<:Integer, T_n<:Real}",href:"#NeuralQuantumStates.Hilberts.build-Union{Tuple{T_n}, Tuple{T}, Tuple{Val{:Fock}, T, Integer}} where {T<:Integer, T_n<:Real}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.build")],-1)),s[100]||(s[100]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[101]||(s[101]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Val{:Fock}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n_max</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, N</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; ∑n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{T_n,Nothing}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,T_n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NeuralQuantumStates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hilberts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FiniteUniformHilbert</span></span></code></pre></div><p>Build a finite uniform Hilbert space for a Fock system.</p><p><strong>Arguments</strong></p><ul><li><p><code>n_max::T</code>: Allowed maximum number of particles in each lattice site.</p></li><li><p><code>N::Integer</code>: Number of degrees of freedom.</p></li><li><p><code>∑n::Union{T_n,Nothing}</code>: The total number of particles to be conserved. Default is <code>nothing</code>.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>NeuralQuantumStates.Hilberts.FiniteUniformHilbert</code>: The finite uniform Hilbert space for a Fock system.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))]),i("details",P,[i("summary",null,[s[102]||(s[102]=i("a",{id:"NeuralQuantumStates.Hilberts.check-Union{Tuple{N_DoF}, Tuple{T_lDoF}, Tuple{NeuralQuantumStates.Hilberts.NoDiscreteHilbertConstraint, Tuple{Vararg{T_lDoF, N_DoF}}}} where {T_lDoF<:Real, N_DoF}",href:"#NeuralQuantumStates.Hilberts.check-Union{Tuple{N_DoF}, Tuple{T_lDoF}, Tuple{NeuralQuantumStates.Hilberts.NoDiscreteHilbertConstraint, Tuple{Vararg{T_lDoF, N_DoF}}}} where {T_lDoF<:Real, N_DoF}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.check")],-1)),s[103]||(s[103]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[104]||(s[104]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    constraint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NeuralQuantumStates.Hilberts.NoDiscreteHilbertConstraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N_DoF,T_lDoF}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T_lDoF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,N_DoF} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Bool</span></span></code></pre></div><p>Always return <code>true</code> if there is no Hilbert space constraint.</p><p><strong>Arguments</strong></p><ul><li><p><code>constraint::NeuralQuantumStates.Hilberts.NoDiscreteHilbertConstraint</code>: A <code>NeuralQuantumStates.Hilberts.NoDiscreteHilbertConstraint</code> object.</p></li><li><p><code>x::NTuple{N_DoF,T_lDoF}</code>: A state to be checked.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>Bool</code>: Always <code>true</code>.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))]),i("details",q,[i("summary",null,[s[105]||(s[105]=i("a",{id:"NeuralQuantumStates.Hilberts.check-Union{Tuple{N_DoF}, Tuple{T_lDoF}, Tuple{T}, Tuple{NeuralQuantumStates.Hilberts.SumConstraint{T}, Tuple{Vararg{T_lDoF, N_DoF}}}} where {T<:Real, T_lDoF<:Real, N_DoF}",href:"#NeuralQuantumStates.Hilberts.check-Union{Tuple{N_DoF}, Tuple{T_lDoF}, Tuple{T}, Tuple{NeuralQuantumStates.Hilberts.SumConstraint{T}, Tuple{Vararg{T_lDoF, N_DoF}}}} where {T<:Real, T_lDoF<:Real, N_DoF}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.check")],-1)),s[106]||(s[106]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[107]||(s[107]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    constraint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NeuralQuantumStates.Hilberts.SumConstraint{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N_DoF,T_lDoF}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,T_lDoF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,N_DoF} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Bool</span></span></code></pre></div><p>Check if the sum of the elements of a given state is equal to the given sum value.</p><p><strong>Arguments</strong></p><ul><li><p><code>constraint::NeuralQuantumStates.Hilberts.SumConstraint{T}</code>: A <code>NeuralQuantumStates.Hilberts.SumConstraint</code> object.</p></li><li><p><code>x::NTuple{N_DoF,T_lDoF}</code>: A state to be checked.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>Bool</code>: <code>true</code> if the sum of the elements of the given state is equal to the given sum value.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))]),i("details",G,[i("summary",null,[s[108]||(s[108]=i("a",{id:"NeuralQuantumStates.Hilberts.check-Union{Tuple{N_HS}, Tuple{NeuralQuantumStates.Hilberts.NoCompositeDiscreteHilbertConstraint, Tuple{Vararg{Tuple{Vararg{T, N}} where {N, T}, N_HS}}}} where N_HS",href:"#NeuralQuantumStates.Hilberts.check-Union{Tuple{N_HS}, Tuple{NeuralQuantumStates.Hilberts.NoCompositeDiscreteHilbertConstraint, Tuple{Vararg{Tuple{Vararg{T, N}} where {N, T}, N_HS}}}} where N_HS"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.check")],-1)),s[109]||(s[109]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[110]||(s[110]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    constraint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NeuralQuantumStates.Hilberts.NoCompositeDiscreteHilbertConstraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N_HS,NTuple}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {N_HS} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Bool</span></span></code></pre></div><p>Always return <code>true</code> if there is no composite discrete Hilbert space constraint.</p><p><strong>Arguments</strong></p><ul><li><p><code>constraint::NeuralQuantumStates.Hilberts.NoCompositeDiscreteHilbertConstraint</code>: A <code>NeuralQuantumStates.Hilberts.NoCompositeDiscreteHilbertConstraint</code> object.</p></li><li><p><code>x::NTuple{N_HS,NTuple}</code>: A composite state to be checked.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>Bool</code>: Always <code>true</code>.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))]),i("details",K,[i("summary",null,[s[111]||(s[111]=i("a",{id:"NeuralQuantumStates.Hilberts.check-Union{Tuple{N_HS}, Tuple{T}, Tuple{NeuralQuantumStates.Hilberts.CompositeSumConstraint{T, N_HS}, Tuple{Vararg{Tuple{Vararg{T, N}} where {N, T}, N_HS}}}} where {T<:Real, N_HS}",href:"#NeuralQuantumStates.Hilberts.check-Union{Tuple{N_HS}, Tuple{T}, Tuple{NeuralQuantumStates.Hilberts.CompositeSumConstraint{T, N_HS}, Tuple{Vararg{Tuple{Vararg{T, N}} where {N, T}, N_HS}}}} where {T<:Real, N_HS}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.check")],-1)),s[112]||(s[112]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[113]||(s[113]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    constraint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NeuralQuantumStates.Hilberts.CompositeSumConstraint{T,N_HS}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N_HS,NTuple}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,N_HS} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Bool</span></span></code></pre></div><p>Check if the sum of the elements of a given composite state is equal to the given sum values.</p><p><strong>Arguments</strong></p><ul><li><p><code>constraint::NeuralQuantumStates.Hilberts.CompositeSumConstraint{T,N_HS}</code>: A <code>NeuralQuantumStates.Hilberts.CompositeSumConstraint</code> object.</p></li><li><p><code>x::NTuple{N_HS,NTuple}</code>: A composite state to be checked.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>Bool</code>: <code>true</code> if the sum of the elements of the given composite state is equal to the given sum values.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))]),i("details",$,[i("summary",null,[s[114]||(s[114]=i("a",{id:"NeuralQuantumStates.Hilberts.n_DoF-Union{Tuple{NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}}, Tuple{N_DoF}} where N_DoF",href:"#NeuralQuantumStates.Hilberts.n_DoF-Union{Tuple{NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}}, Tuple{N_DoF}} where N_DoF"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.n_DoF")],-1)),s[115]||(s[115]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[116]||(s[116]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">n_DoF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hilbert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {N_DoF}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    -&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(N_DoF)</span></span></code></pre></div><p>Get the number of degrees of freedom of the given uniform Hilbert space.</p><p><strong>Arguments</strong></p><ul><li><code>hilbert::NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}</code>: A uniform Hilbert space.</li></ul><p><strong>Returns</strong></p><ul><li><code>typeof(N_DoF)</code>: The number of degrees of freedom of the given uniform Hilbert space.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))]),i("details",J,[i("summary",null,[s[117]||(s[117]=i("a",{id:"NeuralQuantumStates.Hilberts.n_lDoF-Union{Tuple{N_DoF}, Tuple{NeuralQuantumStates.Hilberts.CompositeUniformHilbert{N_DoF}, Integer}} where N_DoF",href:"#NeuralQuantumStates.Hilberts.n_lDoF-Union{Tuple{N_DoF}, Tuple{NeuralQuantumStates.Hilberts.CompositeUniformHilbert{N_DoF}, Integer}} where N_DoF"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.n_lDoF")],-1)),s[118]||(s[118]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[119]||(s[119]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">n_lDoF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hilbert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NeuralQuantumStates.Hilberts.CompositeUniformHilbert{N_DoF}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dof_index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">integer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {N_DoF} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Integer</span></span></code></pre></div><p>Get the number of local degrees of freedom of the given composite uniform Hilbert space at the given degree of freedom index.</p><p><strong>Arguments</strong></p><ul><li><p><code>hilbert::NeuralQuantumStates.Hilberts.CompositeUniformHilbert{N_DoF}</code>: A composite uniform Hilbert space.</p></li><li><p><code>dof_index::Integer</code>: A degree of freedom index.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>Integer</code>: The number of local degrees of freedom of the given composite uniform Hilbert space at the given degree of freedom index.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))]),i("details",Z,[i("summary",null,[s[120]||(s[120]=i("a",{id:"NeuralQuantumStates.Hilberts.n_lDoF-Union{Tuple{NeuralQuantumStates.Hilberts.FiniteUniformHilbert{T, N_DoF, N_lDoF}}, Tuple{N_lDoF}, Tuple{N_DoF}, Tuple{T}} where {T<:Real, N_DoF, N_lDoF}",href:"#NeuralQuantumStates.Hilberts.n_lDoF-Union{Tuple{NeuralQuantumStates.Hilberts.FiniteUniformHilbert{T, N_DoF, N_lDoF}}, Tuple{N_lDoF}, Tuple{N_DoF}, Tuple{T}} where {T<:Real, N_DoF, N_lDoF}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.n_lDoF")],-1)),s[121]||(s[121]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[122]||(s[122]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">n_lDoF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hilbert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NeuralQuantumStates.Hilberts.FiniteUniformHilbert{T,N_DoF,N_lDoF}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,N_DoF,N_lDoF} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(N_lDoF)</span></span></code></pre></div><p>Get the number of local degrees of freedom of the given finite uniform Hilbert space.</p><p><strong>Arguments</strong></p><ul><li><code>hilbert::NeuralQuantumStates.Hilberts.FiniteUniformHilbert{T,N_DoF,N_lDoF}</code>: A finite uniform Hilbert space.</li></ul><p><strong>Returns</strong></p><ul><li><code>typeof(N_lDoF)</code>: The number of local degrees of freedom of the given finite uniform Hilbert space.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))]),i("details",W,[i("summary",null,[s[123]||(s[123]=i("a",{id:"NeuralQuantumStates.Hilberts.n_lDoF-Union{Tuple{NeuralQuantumStates.Hilberts.InfiniteUniformHilbert{T, N_DoF}}, Tuple{N_DoF}, Tuple{T}} where {T<:Real, N_DoF}",href:"#NeuralQuantumStates.Hilberts.n_lDoF-Union{Tuple{NeuralQuantumStates.Hilberts.InfiniteUniformHilbert{T, N_DoF}}, Tuple{N_DoF}, Tuple{T}} where {T<:Real, N_DoF}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.n_lDoF")],-1)),s[124]||(s[124]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[125]||(s[125]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">n_lDoF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hilbert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NeuralQuantumStates.Hilberts.InfiniteUniformHilbert{T,N_DoF}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,N_DoF} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(N_DoF)</span></span></code></pre></div><p>Throws an <code>OverflowError</code> since the number of local degrees of freedom of an infinite uniform Hilbert space is infinite.</p><p><strong>Arguments</strong></p><ul><li><code>hilbert::NeuralQuantumStates.Hilberts.InfiniteUniformHilbert{T,N_DoF}</code>: An infinite uniform Hilbert space.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,5))]),i("details",X,[i("summary",null,[s[126]||(s[126]=i("a",{id:"NeuralQuantumStates.Hilberts.n_states-Union{Tuple{NeuralQuantumStates.Hilberts.FiniteUniformHilbert{T, N_DoF, N_lDoF}}, Tuple{N_lDoF}, Tuple{N_DoF}, Tuple{T}} where {T<:Real, N_DoF, N_lDoF}",href:"#NeuralQuantumStates.Hilberts.n_states-Union{Tuple{NeuralQuantumStates.Hilberts.FiniteUniformHilbert{T, N_DoF, N_lDoF}}, Tuple{N_lDoF}, Tuple{N_DoF}, Tuple{T}} where {T<:Real, N_DoF, N_lDoF}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.n_states")],-1)),s[127]||(s[127]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[128]||(s[128]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">n_states</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hilbert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NeuralQuantumStates.Hilberts.FiniteUniformHilbert{T,N_DoF,N_lDoF}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,N_DoF,N_lDoF} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Integer</span></span></code></pre></div><p>Get the number of states of the given finite uniform Hilbert space.</p><p><strong>Arguments</strong></p><ul><li><code>hilbert::NeuralQuantumStates.Hilberts.FiniteUniformHilbert{T,N_DoF,N_lDoF}</code>: A finite uniform Hilbert space.</li></ul><p><strong>Returns</strong></p><ul><li><code>Integer</code>: The number of states of the given finite uniform Hilbert space.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))]),i("details",Y,[i("summary",null,[s[129]||(s[129]=i("a",{id:"NeuralQuantumStates.Hilberts.n_states-Union{Tuple{NeuralQuantumStates.Hilberts.InfiniteUniformHilbert{T, N_DoF}}, Tuple{N_DoF}, Tuple{T}} where {T<:Real, N_DoF}",href:"#NeuralQuantumStates.Hilberts.n_states-Union{Tuple{NeuralQuantumStates.Hilberts.InfiniteUniformHilbert{T, N_DoF}}, Tuple{N_DoF}, Tuple{T}} where {T<:Real, N_DoF}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.n_states")],-1)),s[130]||(s[130]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[131]||(s[131]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">n_states</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hilbert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NeuralQuantumStates.Hilberts.InfiniteUniformHilbert{T,N_DoF}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,N_DoF} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Integer</span></span></code></pre></div><p>Throws an <code>OverflowError</code> since the number of states of an infinite uniform Hilbert space is infinite.</p><p><strong>Arguments</strong></p><ul><li><code>hilbert::NeuralQuantumStates.Hilberts.InfiniteUniformHilbert{T,N_DoF}</code>: An infinite uniform Hilbert space.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,5))]),i("details",ss,[i("summary",null,[s[132]||(s[132]=i("a",{id:"NeuralQuantumStates.Hilberts.state_index_to_state-Union{Tuple{N_DoF}, Tuple{NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}, AbstractVector{Int64}}} where N_DoF",href:"#NeuralQuantumStates.Hilberts.state_index_to_state-Union{Tuple{N_DoF}, Tuple{NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}, AbstractVector{Int64}}} where N_DoF"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.state_index_to_state")],-1)),s[133]||(s[133]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[134]||(s[134]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">state_index_to_state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hilbert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    indices</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{Int}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {N_DoF} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vector{NTuple}</span></span></code></pre></div><p>Return the states corresponding to the given indices in the given uniform Hilbert space.</p><p><strong>Arguments</strong></p><ul><li><p><code>hilbert::NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}</code>: The uniform Hilbert space.</p></li><li><p><code>indices::AbstractVector{Int}</code>: The indices of the states to be returned in the state representation.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>Vector{NTuple}</code>: A vector of states corresponding to the given indices in the state representation.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))]),i("details",is,[i("summary",null,[s[135]||(s[135]=i("a",{id:"NeuralQuantumStates.Hilberts.state_index_to_state-Union{Tuple{N_DoF}, Tuple{NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}, Int64}} where N_DoF",href:"#NeuralQuantumStates.Hilberts.state_index_to_state-Union{Tuple{N_DoF}, Tuple{NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}, Int64}} where N_DoF"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.state_index_to_state")],-1)),s[136]||(s[136]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[137]||(s[137]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">state_index_to_state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hilbert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {N_DoF} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NTuple</span></span></code></pre></div><p>Return the state corresponding to the given index in the given uniform Hilbert space.</p><p><strong>Arguments</strong></p><ul><li><p><code>hilbert::NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}</code>: The uniform Hilbert space.</p></li><li><p><code>index::AbstractVector{Int}</code>: The index of the state to be returned in the state representation.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>NTuple</code>: A state corresponding to the given index in the state representation.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))]),i("details",ts,[i("summary",null,[s[138]||(s[138]=i("a",{id:"NeuralQuantumStates.Hilberts.state_to_state_index-Union{Tuple{T}, Tuple{N_DoF}, Tuple{NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}, AbstractArray{Tuple{Vararg{T, N_DoF}}, 1}}} where {N_DoF, T<:Real}",href:"#NeuralQuantumStates.Hilberts.state_to_state_index-Union{Tuple{T}, Tuple{N_DoF}, Tuple{NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}, AbstractArray{Tuple{Vararg{T, N_DoF}}, 1}}} where {N_DoF, T<:Real}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.state_to_state_index")],-1)),s[139]||(s[139]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[140]||(s[140]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">state_to_state_index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hilbert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    states</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{NTuple{N_DoF,T}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {N_DoF,T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vector{Integer}</span></span></code></pre></div><p>Return the indices of the given states in the given uniform Hilbert space.</p><p><strong>Arguments</strong></p><ul><li><p><code>hilbert::NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}</code>: The uniform Hilbert space.</p></li><li><p><code>states::AbstractVector{NTuple{N_DoF,T}}</code>: The states to be returned in the index representation.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>Vector{Integer}</code>: A vector of indices of the given states in the index representation.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))]),i("details",es,[i("summary",null,[s[141]||(s[141]=i("a",{id:"NeuralQuantumStates.Hilberts.state_to_state_index-Union{Tuple{T}, Tuple{N_DoF}, Tuple{NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}, Tuple{Vararg{T, N_DoF}}}} where {N_DoF, T<:Real}",href:"#NeuralQuantumStates.Hilberts.state_to_state_index-Union{Tuple{T}, Tuple{N_DoF}, Tuple{NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}, Tuple{Vararg{T, N_DoF}}}} where {N_DoF, T<:Real}"},[i("span",{class:"jlbinding"},"NeuralQuantumStates.Hilberts.state_to_state_index")],-1)),s[142]||(s[142]=t()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[143]||(s[143]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">state_to_state_index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hilbert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N_DoF,T}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {N_DoF,T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Integer</span></span></code></pre></div><p>Return the index of the given state in the given uniform Hilbert space.</p><p><strong>Arguments</strong></p><ul><li><p><code>hilbert::NeuralQuantumStates.Hilberts.UniformHilbert{N_DoF}</code>: The uniform Hilbert space.</p></li><li><p><code>state::NTuple{N_DoF,T}</code>: The state to be returned in the index representation.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>Integer</code>: The index of the given state in the index representation.</li></ul><p><a href="./github.com/cevenkadir/NeuralQuantumStates.jl">source</a></p>`,7))])])}const us=p(o,[["render",as]]);export{ks as __pageData,us as default};
